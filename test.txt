import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersUriSpec;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersSpec;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import reactor.core.publisher.Mono;

import java.lang.reflect.Field;
import java.time.Duration;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class BbgCatalogServiceTest {

    @Mock
    private WebClient webClient;
    @Mock
    private RequestHeadersUriSpec<?> uriSpec;
    @Mock
    private RequestHeadersSpec<?> headersSpec;
    @Mock
    private ResponseSpec responseSpec;

    @InjectMocks
    private BbgCatalogService service;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);

        // Set @Value fields via reflection
        ReflectionTestUtils.setField(service, "eapCatalogsUrl", "http://dummy/api");
        ReflectionTestUtils.setField(service, "requestTimeout", 1);
        ReflectionTestUtils.setField(service, "maxRetryAttempts", 1);

        // Set final webClient via reflection if needed
        ReflectionTestUtils.setField(service, "webClient", webClient);

        // Chain WebClient mocks
        when(webClient.get()).thenReturn(uriSpec);
        when(uriSpec.uri(anyString())).thenReturn(headersSpec);
        when(headersSpec.header(anyString(), anyString())).thenReturn(headersSpec);
        when(headersSpec.header(anyString(), anyString(), anyString())).thenReturn(headersSpec);
        when(headersSpec.retrieve()).thenReturn(responseSpec);
    }

    @Test
    void fetchCatalogs_success() {
        when(responseSpec.bodyToMono(String.class)).thenReturn(Mono.just("{\"contains\":[]}"));

        String result = service.fetchCatalogs("foo");
        assertEquals("{\"contains\":[]}", result);
    }

    @Test
    void fetchCatalogIdViaApiCall_withScheduledType_returnsIdentifier() {
        String json = "{\"contains\":[{\"subscriptionType\":\"scheduled\",\"identifier\":\"id1\"}]}";
        BbgCatalogService spy = spy(service);
        doReturn(json).when(spy).fetchCatalogs(any());

        String id = spy.fetchCatalogIdViaApiCall("dummy");
        assertEquals("id1", id);
    }

    @Test
    void fetchCatalogIdViaApiCall_noValidIdentifier_throwsException() {
        String json = "{\"contains\":[{\"subscriptionType\":\"notscheduled\",\"identifier\":\"id2\"}]}";
        BbgCatalogService spy = spy(service);
        doReturn(json).when(spy).fetchCatalogs(any());

        Exception e = assertThrows(RuntimeException.class, () -> spy.fetchCatalogIdViaApiCall("dummy"));
        assertTrue(e.getMessage().contains("Failed to obtain catalog identifier"));
    }

    @Test
    void fetchCatalogIdViaApiCall_nullResponse_throwsException() {
        BbgCatalogService spy = spy(service);
        doReturn(null).when(spy).fetchCatalogs(any());

        Exception e = assertThrows(RuntimeException.class, () -> spy.fetchCatalogIdViaApiCall("dummy"));
        assertTrue(e.getMessage().contains("Failed to obtain catalog identifier"));
    }

    @Test
    void getCatalogId_cachesResultsAndCallsApiOnce() throws Exception {
        String dl = "abc";
        BbgCatalogService spy = spy(service);
        doReturn("id42").when(spy).fetchCatalogIdViaApiCall(dl);

        // Clear cache for clean test run
        Field f = BbgCatalogService.class.getDeclaredField("catalogIdMap");
        f.setAccessible(true);
        ((Map<?, ?>) f.get(spy)).clear();

        String id1 = spy.getCatalogId(dl);
        String id2 = spy.getCatalogId(dl);

        assertEquals("id42", id1);
        assertEquals("id42", id2);
        verify(spy, times(1)).fetchCatalogIdViaApiCall(dl);
    }
}
