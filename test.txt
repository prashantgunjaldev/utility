import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.modelmapper.ModelMapper;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ModelMapperUtilTest {

    @Mock
    private ModelMapper modelMapper;

    @InjectMocks
    private ModelMapperUtil modelMapperUtil;

    private PsrRequestDTO dto;
    private PsrRequestEntity entity;
    private PsrRequestLogDTO logDto;
    private PsrRequestLogEntity logEntity;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        dto = mock(PsrRequestDTO.class);
        entity = mock(PsrRequestEntity.class);
        logDto = mock(PsrRequestLogDTO.class);
        logEntity = mock(PsrRequestLogEntity.class);
    }

    @Test
    void testConvertFromDTOToEntity_PsrRequestEntity() {
        when(modelMapper.map(dto, PsrRequestEntity.class))
                .thenReturn(entity);
        PsrRequestEntity res = modelMapperUtil.convertFromDTOtoEntity(dto);
        assertEquals(entity, res);
        verify(modelMapper, times(1)).map(dto, PsrRequestEntity.class);
    }

    @Test
    void testConvertFromDTOToEntity_PsrRequestLogEntity() {
        when(modelMapper.map(dto, PsrRequestLogEntity.class))
                .thenReturn(logEntity);
        PsrRequestLogEntity result = modelMapperUtil.convertFromDTOtoEntity(dto);
        assertEquals(logEntity, result);
        verify(modelMapper).map(dto, PsrRequestLogEntity.class);
    }

    @Test
    void testConvertFromEntityToDTO_PsrRequestLogDTO() {
        when(modelMapper.map(logEntity, PsrRequestLogDTO.class))
                .thenReturn(logDto);
        PsrRequestLogDTO result = modelMapperUtil.convertFromEntityToDTO(logEntity);
        assertEquals(logDto, result);
        verify(modelMapper).map(logEntity, PsrRequestLogDTO.class);
    }

    @Test
    void testInit() {
        ModelMapperUtil mmu = new ModelMapperUtil();
        mmu.init();
        // Further assertions could verify instantiation if needed, but this guarantees init method coverage.
    }
}
