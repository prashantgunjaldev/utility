@Test
void testDownload_when4xx_shouldThrowException() {
    // Mocks
    WebClient.RequestHeadersUriSpec<?> uriSpec = mock(WebClient.RequestHeadersUriSpec.class);
    WebClient.RequestHeadersSpec<?> headersSpec = mock(WebClient.RequestHeadersSpec.class);
    WebClient.ResponseSpec responseSpec = mock(WebClient.ResponseSpec.class);
    ClientResponse clientResponse = mock(ClientResponse.class);

    // Setup WebClient mock chain
    when(webClient.get()).thenReturn(uriSpec);
    when(uriSpec.uri(any())).thenReturn(headersSpec);
    when(headersSpec.header(eq(HttpHeaders.AUTHORIZATION), anyString())).thenReturn(headersSpec);
    when(headersSpec.header(eq("api-version"), anyString())).thenReturn(headersSpec);
    when(headersSpec.accept(MediaType.APPLICATION_OCTET_STREAM)).thenReturn(headersSpec);
    when(headersSpec.retrieve()).thenReturn(responseSpec);

    // Simulate onStatus match for 4xx
    when(responseSpec.onStatus(any(), any())).thenAnswer(invocation -> {
        Predicate<HttpStatus> predicate = invocation.getArgument(0);
        Function<ClientResponse, Mono<? extends Throwable>> errorFunction = invocation.getArgument(1);

        // Return a new responseSpec that throws exception via onStatus
        when(clientResponse.statusCode()).thenReturn(HttpStatus.BAD_REQUEST);
        when(clientResponse.bodyToMono(String.class)).thenReturn(Mono.just("Bad Request"));

        return WebClient.ResponseSpec.class.cast(
            new WebClient.ResponseSpec() {
                @Override
                public <T> Mono<T> bodyToMono(Class<T> aClass) {
                    return Mono.error(new RuntimeException("Failed to download from blob: 400 BAD_REQUEST"));
                }

                @Override
                public <T> Flux<T> bodyToFlux(Class<T> aClass) {
                    return Flux.error(new RuntimeException("Failed to download from blob: 400 BAD_REQUEST"));
                }

                @Override
                public Mono<ResponseEntity<Void>> toBodilessEntity() {
                    return Mono.empty();
                }
            }
        );
    });

    // Token mock
    when(authService.getToken("dl")).thenReturn("mock-token");

    // Act & Assert
    assertThatThrownBy(() -> service.download("http://fake-url", "dl").blockFirst())
        .isInstanceOf(RuntimeException.class)
        .hasMessageContaining("Failed to download from blob: 400");
}


====
@ExtendWith(MockitoExtension.class)
class BbgSseEventHandlerServiceTest {

    @Mock
    private DownloadTaskRepository taskRepository;

    @Mock
    private PsrRequestLogRepository logRepository;

    @InjectMocks
    private BbgSseEventHandlerService handlerService;

    @Test
    void shouldHandleSseEventAndSaveTask() {
        // Given
        String requestId = "12345";
        String fileName = "sample-file.csv";
        String downloadUrl = "https://example.com/download";
        String vendor = "VENDOR_1";

        // Construct valid JSON
        String eventData = """
        {
            "@type": "DistributionPublishedActivity",
            "generated": {
                "@type": "Distribution",
                "snapshot": {
                    "dataset": {
                        "identifier": "%s"
                    }
                },
                "url": "%s",
                "name": "%s",
                "qid": "%s"
            }
        }
        """.formatted(requestId, downloadUrl, fileName, requestId);

        // When
        Mockito.when(logRepository.getPsrRequestLogEntityByRequestId(requestId)).thenReturn(new PsrRequestLogEntity());

        // Then
        handlerService.handleSseEvent(eventData, vendor);

        // Verify task saved
        ArgumentCaptor<DownloadTaskEntity> captor = ArgumentCaptor.forClass(DownloadTaskEntity.class);
        Mockito.verify(taskRepository).save(captor.capture());

        DownloadTaskEntity savedTask = captor.getValue();
        assertEquals(requestId, savedTask.getRequestId());
        assertEquals(downloadUrl, savedTask.getUrl());
        assertEquals(fileName, savedTask.getFileName());
        assertEquals("PENDING", savedTask.getStatus());
        assertEquals(vendor, savedTask.getVendorAccount());
    }
}
