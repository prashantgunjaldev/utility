import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.test.util.ReflectionTestUtils;

import java.time.LocalDateTime;
import java.util.concurrent.atomic.AtomicReference;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class BbgPsrRequestServiceTest {

    @Mock
    private WebClient webClient;
    @Mock
    private BbgAuthService authService;
    @Mock
    private BbgCatalogService catalogService;
    @Mock
    private PsrRequestLoggerService loggerService;
    @Mock
    private PsrRequestRepository requestRepository;

    @InjectMocks
    private BbgPsrRequestService service;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        TestUtil.setPrivateField(service, "apiUrl", "http://fake/api/");
        TestUtil.setPrivateField(service, "maxRetryAttempts", 2);
        TestUtil.setPrivateField(service, "hostname", "test-0");
        TestUtil.setPrivateField(service, "pollingFrequency", 2);
        TestUtil.setPrivateField(service, "requestRepository", requestRepository);
        TestUtil.setPrivateField(service, "authService", authService);
        TestUtil.setPrivateField(service, "catalogService", catalogService);
        TestUtil.setPrivateField(service, "loggerService", loggerService);
    }

    @Test
    void request_FailureBranch_LogsAndThrows() {
        PsrRequestEntity mockTask = mock(PsrRequestEntity.class);
        when(mockTask.getBbRequestPayload()).thenReturn("{\"foo\":\"bar\"}");
        when(mockTask.getDl()).thenReturn("dl1");
        when(catalogService.getCatalogId(any())).thenReturn("cat123");
        when(authService.getToken(any())).thenReturn("token");
        when(requestRepository.save(any(PsrRequestEntity.class))).thenReturn(mockTask);
        // Simulate an error response from HTTP POST or parsing  
        when(webClient.post()).thenThrow(new RuntimeException("WebClient Error"));

        // Exercise and assert
        Exception ex = assertThrows(RuntimeException.class, () -> service.request(mockTask));
        assertTrue(ex.getMessage().contains("WebClient Error"));

        verify(loggerService, atLeastOnce()).logState(any(), any(), any());
        verify(requestRepository, atLeastOnce()).save(any());
        verify(authService, atLeastOnce()).getToken(any());
        verify(catalogService, atLeastOnce()).getCatalogId(any());
    }

    @Test
    void taskPoller_handlesRepositoryError() {
        // Simulate repository throws in taskPoller flow
        when(requestRepository.claimTasks(anyInt(), anyString())).thenThrow(new RuntimeException("DB error"));

        // Ensure log.error is called, but exception is contained
        assertDoesNotThrow(() -> service.taskPoller());
        verify(requestRepository, atLeastOnce()).claimTasks(anyInt(), anyString());
    }

    // Utility for setting private fields in tests, if not already present
    public static class TestUtil {
        public static void setPrivateField(Object target, String fieldName, Object value) {
            ReflectionTestUtils.setField(target, fieldName, value);
        }
    }
}
