import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.*;
import reactor.core.publisher.*;
import reactor.test.StepVerifier;

import java.time.Duration;
import java.util.function.Function;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BbgSseListenerServiceTest {

    @Mock private WebClient webClient;
    @Mock private WebClient.RequestHeadersUriSpec<?> uriSpec;
    @Mock private WebClient.RequestHeadersSpec<?> headersSpec;
    @Mock private BbgAuthService authService;
    @Mock private BbgSseEventHandlerService eventHandlerService;

    @InjectMocks
    private BbgSseListenerService listenerService;

    private final String apiUrl = "https://api.bloomberg.com/eap/notifications/sse";

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        listenerService.apiUrl = apiUrl;
        listenerService.hostname = "host1";
        listenerService.initialDelay = 1;
        listenerService.pollInterval = 5;
    }

    @Test
    void testPollSSEOnceSuccess() {
        String dl = "DL123";
        String token = "mock-token";
        String sseData = "mock-data";

        when(authService.getTokenWithNonBlocking(eq(dl), eq(false)))
                .thenReturn(Mono.just(token));

        when(webClient.get()).thenReturn(uriSpec);
        when(uriSpec.uri(apiUrl)).thenReturn(headersSpec);
        when(headersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(headersSpec);
        when(headersSpec.header(eq("Authorization"), anyString())).thenReturn(headersSpec);
        when(headersSpec.header(eq("Last-Event-Id"), anyString())).thenReturn(headersSpec);
        when(headersSpec.exchangeToFlux(any()))
                .thenAnswer(invocation -> {
                    Function<ClientResponse, Publisher<String>> transformer = invocation.getArgument(0);
                    return Flux.just(sseData);
                });

        doNothing().when(eventHandlerService).handleSseEvent(eq(sseData), eq(dl));

        StepVerifier.create(listenerService.pollSSEOnce(dl, 1))
                .expectNext(sseData)
                .verifyComplete();

        verify(eventHandlerService, times(1)).handleSseEvent(sseData, dl);
    }

    @Test
    void testPollSSEOnce401UnauthorizedTriggersRetry() {
        String dl = "DL401";

        when(authService.getTokenWithNonBlocking(eq(dl), eq(false)))
                .thenReturn(Mono.just("invalid-token"));

        when(webClient.get()).thenReturn(uriSpec);
        when(uriSpec.uri(apiUrl)).thenReturn(headersSpec);
        when(headersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(headersSpec);
        when(headersSpec.header(eq("Authorization"), anyString())).thenReturn(headersSpec);
        when(headersSpec.header(eq("Last-Event-Id"), anyString())).thenReturn(headersSpec);
        when(headersSpec.exchangeToFlux(any()))
                .thenAnswer(invocation -> {
                    Function<ClientResponse, Publisher<String>> transformer = invocation.getArgument(0);
                    return transformer.apply(ClientResponse.create(401).build());
                });

        StepVerifier.withVirtualTime(() -> listenerService.pollSSEOnce(dl, 1))
                .expectSubscription()
                .thenAwait(Duration.ofSeconds(1))
                .expectNextCount(0)
                .verifyComplete();
    }

    @Test
    void testPollSSEOnceErrorHandledGracefully() {
        String dl = "DL500";

        when(authService.getTokenWithNonBlocking(eq(dl), eq(false)))
                .thenReturn(Mono.error(new RuntimeException("Token error")));

        StepVerifier.create(listenerService.pollSSEOnce(dl, 1))
                .verifyComplete();
    }

    @Test
    void testExponentialBackoffDelay() {
        int attempt1 = 1;
        int attempt2 = 2;
        int attempt3 = 3;

        Assertions.assertEquals(1, listenerService.calculateDelay(attempt1));
        Assertions.assertEquals(2, listenerService.calculateDelay(attempt2));
        Assertions.assertEquals(3, listenerService.calculateDelay(attempt3));
    }

    @Test
    void testShutdownFlagTerminatesPolling() {
        String dl = "DLShutdown";
        listenerService.setShutdown(true);

        StepVerifier.create(listenerService.pollSSEOnce(dl, 1))
                .verifyComplete();
    }
}
