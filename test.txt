import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import java.util.UUID;

class PsrRequestLoggerServiceTest {

    @Mock
    private PsrRequestLogRepository psrRequestLogRepository;
    @Mock
    private ModelMapperUtil modelMapperUtil;
    @Mock
    private PsrRequestHelper psrRequestHelper;

    @InjectMocks
    private PsrRequestLoggerService service;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetPsrRequestLogEntityByAcqRequestId_ReturnsNewDtoWhenEntityNull() {
        // Entity found returns null from repo
        when(psrRequestLogRepository.getPsrRequestLogEntityByAcqRequestId("abc")).thenReturn(null);

        var result = service.getPsrRequestLogEntityByAcqRequestId("abc");
        assertNotNull(result);
        // If not found, should return a new DTO, not from mapper
        verify(modelMapperUtil, never()).convertFromEntityToDTO(any());
    }

    @Test
    void testLogState_withRemark_SetsRemarkAndSaves() {
        String status = "TEST";
        PsrRequestLogDTO dto = new PsrRequestLogDTO();
        String remark = "Something went wrong";
        PsrRequestLogDTO builtDto = new PsrRequestLogDTO();

        when(psrRequestHelper.buildPsrRequestLogDTO(status, dto)).thenReturn(builtDto);

        PsrRequestLoggerService spyService = Mockito.spy(service);

        doNothing().when(spyService).save(builtDto);

        spyService.logState(status, dto, remark);

        assertEquals(remark, builtDto.getRemarks());
        verify(spyService).save(builtDto);
    }
}
