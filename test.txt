==
@ExtendWith(MockitoExtension.class)
class BbgPsrRequestServiceTest {
    @Mock private WebClient mockWebClient;
    @Mock private WebClient.RequestBodyUriSpec mockUriSpec;
    @Mock private WebClient.RequestBodySpec mockBodySpec;
    @Mock private WebClient.RequestHeadersSpec<?> mockHeadersSpec;
    @Mock private WebClient.ResponseSpec mockResponseSpec;

    @InjectMocks private BbgPsrRequestService service;

    @BeforeEach
    void setup() {
        when(mockWebClient.post()).thenReturn(mockUriSpec);
        when(mockUriSpec.uri(anyString())).thenReturn(mockBodySpec);
        when(mockBodySpec.header(anyString(), anyString())).thenReturn(mockBodySpec);
        when(mockBodySpec.body(any(), any(Class.class))).thenReturn(mockHeadersSpec);
        when(mockHeadersSpec.retrieve()).thenReturn(mockResponseSpec);
    }
}

==== OK ====
@Test
void request_whenApiReturns201_updatesStatusToDone() {
    String successJson = "{\"statusCode\":201,\"request\":{\"identifier\":\"abc123\"}, \"description\":\"Completed\"}";
    when(mockResponseSpec.bodyToMono(String.class)).thenReturn(Mono.just(successJson));

    PsrRequestEntity request = new PsrRequestEntity();
    service.request(request);

    // Verify that your log, status update, or DB changes are triggered as expected
}

==== ERROR ====
@Test
void request_whenApiReturnsNon201_setsFailedStatus() {
    String failedJson = "{\"statusCode\":400,\"errorMessage\":\"Bad request\"}";
    when(mockResponseSpec.bodyToMono(String.class)).thenReturn(Mono.just(failedJson));

    PsrRequestEntity request = new PsrRequestEntity();
    service.request(request);

    // Assert or verify that failure path was taken (logs, DB, etc.)
}

==
@Test
void request_whenExceptionThrown_setsFailedStatus() {
    when(mockResponseSpec.bodyToMono(String.class))
        .thenReturn(Mono.error(new WebClientResponseException(500, "Error", null, null, null)));

    PsrRequestEntity request = new PsrRequestEntity();
    service.request(request);

    // Assert or verify that exception path was taken
}

==
@Test
void request_whenUnauthorized_refreshesTokenAndRetries() {
    WebClientResponseException unauthorized = new WebClientResponseException(
        401, "Unauthorized", null, null, null
    );
    // First call returns unauthorized, retry returns success
    when(mockResponseSpec.bodyToMono(String.class))
        .thenReturn(Mono.error(unauthorized))
        .thenReturn(Mono.just("{\"statusCode\":201,\"request\":{\"identifier\":\"abc123\"}}"));

    // Mock token refresh as needed
    // when(authService.refresh()).thenReturn("newToken");

    PsrRequestEntity request = new PsrRequestEntity();
    service.request(request);

    // Verify token is refreshed and second call succeeds
}
