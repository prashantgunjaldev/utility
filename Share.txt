import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.retry.Retry;
import java.time.Duration;
import java.util.List;

public List<String> fetchDataInParallel(List<String> urls, ExecutionContext jobContext) {
    List<String> cookies = (List<String>) jobContext.get("cookies");

    return Flux.fromIterable(urls)
            .flatMap(url -> fetchData(url, cookies), 25) // Limit concurrency to 25
            .collectList()
            .block(); // Convert Flux to List (blocking)
}

private Mono<String> fetchData(String url, List<String> cookies) {
    log.info("Fetching -> {}", url);

    return webClient.get()
            .uri(url)
            .headers(headers -> {
                cookies.forEach(cookie -> headers.add("Cookie", cookie));
            })
            .retrieve()
            .bodyToMono(String.class)
            .timeout(Duration.ofSeconds(30))
            .retryWhen(Retry.backoff(2, Duration.ofMillis(1000)) // Retry twice with 1s backoff
                    .doBeforeRetry(retrySignal -> 
                        log.warn("Retrying API call to {} - Attempt {}", url, retrySignal.totalRetries()))
            )
            .doOnError(e -> log.error("Final failure for URL {}: {}", url, e.getMessage()))
            .onErrorResume(e -> Mono.just("Error fetching: " + url + " Error: " + e.getMessage()));
}
