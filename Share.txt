import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

class XMLSchemaDatasetServiceTest {

    @InjectMocks
    private XMLSchemaDatasetService xmlSchemaDatasetService;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private DatasetResponseUtil datasetResponseUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUpdateDataset_Success() {
        // Arrange
        DatasetRequestDTO datasetRequestDTO = new DatasetRequestDTO();
        String datasetId = "123";
        DatasetResponse mockResponse = new DatasetResponse();
        ResponseEntity<DatasetResponse> mockEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);

        when(restTemplate.exchange(
                eq("feedProcessingConfigURL" + Constants.LR_DATASET_URL + "/" + datasetId),
                eq(HttpMethod.PUT),
                any(),
                eq(DatasetResponse.class)
        )).thenReturn(mockEntity);

        when(datasetResponseUtil.put(any())).thenReturn(mockResponse);

        // Act
        DatasetResponse result = xmlSchemaDatasetService.updateDataset(datasetRequestDTO, datasetId);

        // Assert
        assertNotNull(result);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.PUT), any(), eq(DatasetResponse.class));
        verify(datasetResponseUtil, times(1)).put(any());
    }

    @Test
    void testUpdateDataset_Failure() {
        // Arrange
        DatasetRequestDTO datasetRequestDTO = new DatasetRequestDTO();
        String datasetId = "123";
        ResponseEntity<DatasetResponse> mockEntity = new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);

        when(restTemplate.exchange(
                eq("feedProcessingConfigURL" + Constants.LR_DATASET_URL + "/" + datasetId),
                eq(HttpMethod.PUT),
                any(),
                eq(DatasetResponse.class)
        )).thenReturn(mockEntity);

        // Act & Assert
        RuntimeException exception = assertThrows(RuntimeException.class, () -> 
            xmlSchemaDatasetService.updateDataset(datasetRequestDTO, datasetId)
        );
        assertTrue(exception.getMessage().contains("Unable to update dataset"));
    }

    @Test
    void testCreateDataset_Success() {
        // Arrange
        DatasetRequestDTO datasetRequestDTO = new DatasetRequestDTO();
        DatasetResponse mockResponse = new DatasetResponse();
        mockResponse.setDatasetId("123");
        ResponseEntity<DatasetResponse> mockEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);

        when(restTemplate.exchange(
                eq("feedProcessingConfigURL" + Constants.URL_DATASET),
                eq(HttpMethod.POST),
                any(),
                eq(DatasetResponse.class)
        )).thenReturn(mockEntity);

        // Act
        DatasetResponse result = xmlSchemaDatasetService.createDataset(datasetRequestDTO);

        // Assert
        assertNotNull(result);
        assertEquals("123", result.getDatasetId());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(), eq(DatasetResponse.class));
    }

    @Test
    void testCreateDataset_Failure() {
        // Arrange
        DatasetRequestDTO datasetRequestDTO = new DatasetRequestDTO();
        ResponseEntity<DatasetResponse> mockEntity = new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);

        when(restTemplate.exchange(
                eq("feedProcessingConfigURL" + Constants.URL_DATASET),
                eq(HttpMethod.POST),
                any(),
                eq(DatasetResponse.class)
        )).thenReturn(mockEntity);

        // Act & Assert
        FeedProcessingServiceException exception = assertThrows(FeedProcessingServiceException.class, () -> 
            xmlSchemaDatasetService.createDataset(datasetRequestDTO)
        );
        assertTrue(exception.getMessage().contains("Unable to create dataset"));
    }
}
