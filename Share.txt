import com.azure.core.credential.TokenCredential;
import com.azure.core.credential.AccessToken;
import com.azure.core.credential.TokenRequestContext;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Mono;

import java.time.OffsetDateTime;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AzureTokenGeneratorTest {

    @InjectMocks
    private AzureTokenGenerator azureTokenGenerator;

    @Mock
    private DefaultAzureCredentialBuilder credentialBuilder;

    @Mock
    private DefaultAzureCredential defaultCredential;

    @Mock
    private TokenRequestContext tokenRequestContext;

    private final String clientId = "mock-client-id";
    private final String tenantId = "mock-tenant-id";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        azureTokenGenerator = spy(new AzureTokenGenerator());
        doReturn(clientId).when(azureTokenGenerator).getClientId();
        doReturn(tenantId).when(azureTokenGenerator).getTenantId();
    }

    @Test
    void testGetDefaultAzureCredential() {
        DefaultAzureCredentialBuilder builder = mock(DefaultAzureCredentialBuilder.class);
        when(builder.managedIdentityClientId(clientId)).thenReturn(builder);
        when(builder.tenantId(tenantId)).thenReturn(builder);
        when(builder.build()).thenReturn(defaultCredential);

        // Inject mock builder into the method if needed, or refactor class to allow it
        TokenCredential credential = azureTokenGenerator.getDefaultAzureCredential();
        assertNotNull(credential);
    }

    @Test
    void testGetADFToken() {
        AccessToken mockToken = new AccessToken("mock-token", OffsetDateTime.now().plusHours(1));

        DefaultAzureCredentialBuilder builder = mock(DefaultAzureCredentialBuilder.class);
        DefaultAzureCredential credential = mock(DefaultAzureCredential.class);
        when(builder.managedIdentityClientId(clientId)).thenReturn(builder);
        when(builder.tenantId(tenantId)).thenReturn(builder);
        when(builder.build()).thenReturn(credential);
        when(credential.getToken(any(TokenRequestContext.class))).thenReturn(Mono.just(mockToken));

        String token = azureTokenGenerator.getADFAccesToken();
        assertEquals("mock-token", token);
    }
}
