package com.ubs.cumulus.parsingService.xml.morningstar.api;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.ubs.cumulus.parsingService.xml.morningstar.service.MorningStarCreateEvents;
import com.ubs.cumulus.parsingService.xml.morningstar.util.LockManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.security.core.Authentication;
import javax.servlet.http.HttpServletRequest;

@ExtendWith(MockitoExtension.class)
class MorningStarTriggerControllerTest {

    private MockMvc mockMvc;

    @Mock
    private MorningStarCreateEvents morningStarCreateEvents;

    @Mock
    private LockManager lockManager;

    @Mock
    private Authentication authentication;

    @Mock
    private HttpServletRequest request;

    @InjectMocks
    private MorningStarTriggerController controller;

    @BeforeEach
    void setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    void testStartJob_WhenLockIsAcquired_ShouldReturnSuccess() throws Exception {
        when(lockManager.tryLock()).thenReturn(true);

        String requestBody = "{ \"process_id\": \"12345\" }";

        mockMvc.perform(post("/startJob")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(status().isOk());

        verify(lockManager).tryLock();
        verify(lockManager).unlock();
    }

    @Test
    void testStartJob_WhenLockIsNotAcquired_ShouldReturnTooManyRequests() throws Exception {
        when(lockManager.tryLock()).thenReturn(false);

        String requestBody = "{ \"process_id\": \"12345\" }";

        mockMvc.perform(post("/startJob")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(status().isTooManyRequests());

        verify(lockManager).tryLock();
        verify(lockManager, never()).unlock();
    }

    @Test
    void testStartJob_WhenExceptionOccurs_ShouldReturnInternalServerError() throws Exception {
        when(lockManager.tryLock()).thenThrow(new RuntimeException("Test Exception"));

        String requestBody = "{ \"process_id\": \"12345\" }";

        mockMvc.perform(post("/startJob")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(status().isInternalServerError());

        verify(lockManager).tryLock();
        verify(lockManager, never()).unlock();
    }
}
