@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private final RequestResponseLoggingInterceptor loggingInterceptor;

    public SecurityConfig(RequestResponseLoggingInterceptor loggingInterceptor) {
        this.loggingInterceptor = loggingInterceptor;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .antMatchers("/api/**").authenticated()
            .anyRequest().permitAll()
            .and()
            .oauth2ResourceServer().jwt(); // Use AAD authentication

        http.cors().and().csrf().disable();
    }

    @Bean
    public FilterRegistrationBean<RequestResponseLoggingInterceptor> loggingFilter() {
        FilterRegistrationBean<RequestResponseLoggingInterceptor> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(loggingInterceptor);
        registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE); // Run before Spring Security filters
        return registrationBean;
    }
}
