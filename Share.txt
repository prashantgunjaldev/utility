import jakarta.annotation.PostConstruct;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import java.time.Duration;

@Service
public class SSEPollingService {

    private final WebClient webClient;
    private final TokenService tokenService;

    private final Duration delayBetweenPolls = Duration.ofSeconds(10);

    public SSEPollingService(WebClient.Builder webClientBuilder, TokenService tokenService) {
        this.webClient = webClientBuilder
                .baseUrl("https://your-api-host.com") // Replace with actual host
                .build();
        this.tokenService = tokenService;
    }

    @PostConstruct
    public void init() {
        // Start the polling sequence after app startup
        startPolling();
    }

    public void startPolling() {
        Flux.defer(this::pollSSEOnce)
                .repeatWhen(completed -> completed.delayElements(delayBetweenPolls)) // Wait 10s after each poll
                .subscribeOn(Schedulers.boundedElastic())
                .subscribe(
                        this::handleSseEvent,
                        error -> System.err.println("[SSEPollingService] Stream terminated due to error: " + error.getMessage())
                );
    }

    private Flux<String> pollSSEOnce() {
        System.out.println("[SSEPollingService] Making API call...");

        return tokenService.getToken()
                .flatMapMany(token -> webClient.get()
                        .uri("/your/sse/endpoint")
                        .accept(MediaType.TEXT_EVENT_STREAM)
                        .header("Authorization", "Bearer " + token)
                        .retrieve()
                        .onStatus(status -> status.value() == 401,
                                response -> Mono.error(new RuntimeException("401 Unauthorized")))
                        .bodyToFlux(String.class)
                        .doOnComplete(() -> System.out.println("[SSEPollingService] Got response, waiting 10s..."))
                        .doOnNext(data -> System.out.println("[SSEPollingService] Received: " + data))
                )
                .onErrorResume(ex -> {
                    if (isUnauthorized(ex)) {
                        System.out.println("[SSEPollingService] 401 detected, refreshing token and retrying...");
                        return tokenService.refreshToken()
                                .thenMany(pollSSEOnce()); // Retry after refresh
                    }
                    System.err.println("[SSEPollingService] Error occurred: " + ex.getMessage());
                    return Flux.empty(); // Ignore error and continue loop
                });
    }

    private boolean isUnauthorized(Throwable ex) {
        return ex.getMessage() != null && ex.getMessage().contains("401");
    }

    private void handleSseEvent(String eventData) {
        // Custom processing
        System.out.println("[SSEPollingService] Processed Event: " + eventData);
    }
}
