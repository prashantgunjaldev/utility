
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import java.util.logging.Logger;

@Service
@ConditionalOnProperty(name = "api.logging.cleanup.enabled", havingValue = "true", matchIfMissing = false)
public class ApiLoggingCleanupService {
    private static final Logger logger = Logger.getLogger(ApiLoggingCleanupService.class.getName());

    private final LogRepositoryService logRepositoryService;
    private final ApiLoggingCleanupProperties properties;

    public ApiLoggingCleanupService(LogRepositoryService logRepositoryService, ApiLoggingCleanupProperties properties) {
        this.logRepositoryService = logRepositoryService;
        this.properties = properties;
    }

    @Scheduled(cron = "0 0 0 * * ?") // Runs once every 24 hours at midnight
    public void cleanOldLogs() {
        int days = properties.getRetentionDays();
        int deletedRows = logRepositoryService.deleteOldLogs(days);
        logger.info("Deleted " + deletedRows + " old log entries older than " + days + " days.");
    }
}


public int deleteOldLogs(int retentionDays) {
        String sql = "DELETE FROM api_logs WHERE created_on < ?";
        LocalDate thresholdDate = LocalDate.now().minusDays(retentionDays);
        return jdbcTemplate.update(sql, thresholdDate);
    }



api.logging.cleanup.enabled=true
api.logging.cleanup.retention-days=30



@EnableScheduling
