import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
class MorningstarLoginTaskletTest {

    @InjectMocks
    private MorningstarLoginTasklet tasklet;

    @Mock
    private MorningstarLoginWorker loginWorker;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private XPathMappingRepository xPathMappingRepository;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private StepContext stepContext;

    @Mock
    private StepExecution stepExecution;

    @Mock
    private JobExecution jobExecution;

    @Mock
    private ExecutionContext executionContext;

    @BeforeEach
    void setUp() {
        tasklet.restTemplate = restTemplate;
        tasklet.xPathMappingRepository = xPathMappingRepository;
    }

    @Test
    void testExecute_Success() throws Exception {
        // Mock Execution Context
        when(chunkContext.getStepContext()).thenReturn(stepContext);
        when(stepContext.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);

        // Mock cookies retrieval from login worker
        List<String> mockCookies = Collections.singletonList("cookie123");
        when(loginWorker.login()).thenReturn(mockCookies);

        // Mock feedId retrieval
        when(jobExecution.getJobParameters().getString("feedId")).thenReturn("12345");

        // Mock xPathMappings retrieval from repository
        List<XPathMappingEntity> mockXPathMappings = Collections.singletonList(new XPathMappingEntity());
        when(xPathMappingRepository.findByFeedId("12345")).thenReturn(mockXPathMappings);

        // Call execute method
        tasklet.execute(stepContribution, chunkContext);

        // Verify method calls
        verify(loginWorker).setRestTemplate(restTemplate);
        verify(loginWorker).login();
        verify(xPathMappingRepository).findByFeedId("12345");

        // Verify execution context updates
        verify(executionContext).put("cookies", mockCookies);
        verify(executionContext).put("columns", mockXPathMappings);
    }

    @Test
    void testExecute_WithNoFeedId() throws Exception {
        // Mock Execution Context
        when(chunkContext.getStepContext()).thenReturn(stepContext);
        when(stepContext.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);

        // Mock cookies retrieval from login worker
        List<String> mockCookies = Collections.singletonList("cookie123");
        when(loginWorker.login()).thenReturn(mockCookies);

        // Mock Job Parameters (No feedId provided)
        when(jobExecution.getJobParameters().getString("feedId")).thenReturn(null);

        // Call execute method
        tasklet.execute(stepContribution, chunkContext);

        // Verify method calls
        verify(loginWorker).setRestTemplate(restTemplate);
        verify(loginWorker).login();

        // Verify execution context updates
        verify(executionContext).put("cookies", mockCookies);
        verify(executionContext, never()).put(eq("columns"), any());
    }
}
