import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Arrays;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.item.ExecutionContext;

@ExtendWith(MockitoExtension.class)
class GetUniverseWriterTest {

    @Mock
    private MorningstarList morningstarList;
    
    @Mock
    private ExecutionContext jobContext;
    
    @Mock
    private MorningstarRequest request;

    @InjectMocks
    private GetUniverseWriter getUniverseWriter;

    @BeforeEach
    void setUp() {
        // Any initialization if needed
    }

    @Test
    void testWrite_withValidChunks() {
        // Arrange
        XmlParsedValuesMap xmlParsedValuesMap = mock(XmlParsedValuesMap.class);
        XmlParsedValuesMap xmlParsedValuesMap2 = mock(XmlParsedValuesMap.class);
        List<XmlParsedValuesMap> chunkList = Arrays.asList(xmlParsedValuesMap, xmlParsedValuesMap2);

        when(xmlParsedValuesMap.getFlattennedValuesMap()).thenReturn(Collections.emptyList());
        when(xmlParsedValuesMap2.getFlattennedValuesMap()).thenReturn(Collections.emptyList());

        // Act
        assertDoesNotThrow(() -> getUniverseWriter.write(Collections.singletonList(chunkList)));

        // Assert
        verify(morningstarList, times(2)).addStraightValues(anyList());
        verify(morningstarList, times(2)).addListValues(any());
        verify(morningstarList, times(2)).addBenchmarkListValues(any());
    }

    @Test
    void testWrite_withEmptyChunks() {
        // Arrange
        List<XmlParsedValuesMap> emptyChunkList = Collections.emptyList();

        // Act
        assertDoesNotThrow(() -> getUniverseWriter.write(Collections.singletonList(emptyChunkList)));

        // Assert
        verifyNoInteractions(morningstarList);
    }

    @Test
    void testInsertList_withValidData() {
        // Arrange
        XmlParsedValuesMap xmlParsedValuesMap = mock(XmlParsedValuesMap.class);
        Map<String, Object> listValuesMap = mock(Map.class);
        Set<String> keys = Set.of("key1");

        when(xmlParsedValuesMap.getListValuesMap()).thenReturn(listValuesMap);
        when(listValuesMap.keySet()).thenReturn(keys);
        when(listValuesMap.get("key1")).thenReturn(List.of(mock(XmlListValues.class)));

        // Act
        assertDoesNotThrow(() -> getUniverseWriter.insertList(xmlParsedValuesMap));

        // Assert
        verify(morningstarList, times(1)).addListValues(any(XmlListValues.class));
    }

    @Test
    void testInsertBenchmarkList_withValidData() {
        // Arrange
        XmlParsedValuesMap xmlParsedValuesMap = mock(XmlParsedValuesMap.class);
        List<XmlBenchmarkValues> benchmarkValues = List.of(mock(XmlBenchmarkValues.class));

        when(xmlParsedValuesMap.getXmlBenchmarkValuesList()).thenReturn(benchmarkValues);

        // Act
        assertDoesNotThrow(() -> getUniverseWriter.insertBenchmarkList(xmlParsedValuesMap));

        // Assert
        verify(morningstarList, times(1)).addBenchmarkListValues(any(XmlBenchmarkValues.class));
    }

    @Test
    void testInsertAuditData() {
        // Arrange
        XmlParsedValuesMap xmlParsedValuesMap = mock(XmlParsedValuesMap.class);

        // Act
        assertDoesNotThrow(() -> getUniverseWriter.insertAuditData(xmlParsedValuesMap));

        // Assert
        // Assuming it interacts with morningstarList internally
        verifyNoMoreInteractions(morningstarList);
    }
}
