public SixFeedFilesDeltaResponse getSixFileDelta(SixFeedFilesDeltaRequest feedFilesDeltaRequests) {
    deleteFileDeltas(feedFilesDeltaRequests.getFeedId());

    List<SixFeedFilesDeltaResponse> responseList = new ArrayList<>();
    Map<String, List<String>> fileMap = new HashMap<>();
    
    List<SixFeedFilesDelta> feedFilesDeltaFromDB = fileDeltaRepository.findNonProcessedDelta(feedFilesDeltaRequests.getFeedId());

    // Process new files
    processNewFiles(feedFilesDeltaRequests, feedFilesDeltaFromDB, fileMap, responseList);

    // Group files by BC
    sortFilesByBC(fileMap);
    List<SixFeedFilesDeltaDTO> sixFeedFilesDeltaDTOList = createFeedGroup(fileMap);

    SixFeedFilesDeltaResponse feedResponse = new SixFeedFilesDeltaResponse();
    feedResponse.setFeedGroup(sixFeedFilesDeltaDTOList);

    return feedResponse;
}

private void processNewFiles(
        SixFeedFilesDeltaRequest request, 
        List<SixFeedFilesDelta> existingDeltas, 
        Map<String, List<String>> fileMap, 
        List<SixFeedFilesDeltaResponse> responseList) {

    if (existingDeltas.isEmpty()) {
        request.getFileNames().stream()
            .filter(file -> file.getParentName() != null && file.getParentName().contains("_data_"))
            .forEach(file -> processAndSaveDelta(request, file, fileMap, responseList));
    } else {
        processExistingFiles(request, existingDeltas, fileMap, responseList);
    }
}

private void processAndSaveDelta(
        SixFeedFilesDeltaRequest request, 
        File file, 
        Map<String, List<String>> fileMap, 
        List<SixFeedFilesDeltaResponse> responseList) {

    try {
        SixFeedFilesDelta delta = createDeltaEntity(request, file);
        fileDeltaRepository.save(delta);

        SixFeedFilesDeltaResponse feedResponse = new SixFeedFilesDeltaResponse();
        feedResponse.setFeedId(request.getFeedId());
        feedResponse.setProcessId(request.getProcessId());
        feedResponse.setProcessDate(request.getProcessDate());

        String parentName = file.getParentName();
        String bc = stripBC(parentName);
        addToFileMap(fileMap, bc, parentName);
        responseList.add(feedResponse);
    } catch (Exception e) {
        log.error("Exception while inserting: " + e);
    }
}

private SixFeedFilesDelta createDeltaEntity(SixFeedFilesDeltaRequest request, File file) {
    SixFeedFilesDelta delta = new SixFeedFilesDelta();
    delta.generateUniqueId();
    delta.setFeedId(request.getFeedId());
    delta.setProcessId(request.getProcessId());
    delta.setProcessDate(getSQLDate(request.getProcessDate()));
    delta.setFilename(file.getParentName());
    delta.setChildFilename(file.getName());
    delta.setType(Constants.FILE);
    delta.setStatus(Constants.IGNORED);
    delta.setCreatedOn(DateUtil.currentDateTimeInUTC());
    return delta;
}

private void addToFileMap(Map<String, List<String>> fileMap, String bc, String parentName) {
    fileMap.computeIfAbsent(bc, k -> new ArrayList<>()).add(parentName);
}

private void processExistingFiles(
        SixFeedFilesDeltaRequest request, 
        List<SixFeedFilesDelta> existingDeltas, 
        Map<String, List<String>> fileMap, 
        List<SixFeedFilesDeltaResponse> responseList) {

    Set<String> blockedFailedBC = blockFailedAndAcceptedBC(request.getFeedId());

    Set<SixFeedFilesDTO> setFromDB = new HashSet<>();
    Set<SixFeedFilesDTO> setFromRequest = new HashSet<>();

    // Convert DB records to DTOs
    existingDeltas.stream()
        .map(feed -> new SixFeedFilesDTO(feed.getFeedId(), feed.getFilename(), feed.getType()))
        .forEach(setFromDB::add);

    // Convert request files to DTOs
    request.getFileNames().stream()
        .map(file -> new SixFeedFilesDTO(request.getFeedId(), request.getProcessId(), file.getParentName(), file.getType()))
        .forEach(setFromRequest::add);

    // Remove processed files and persist new ones
    setFromRequest.removeAll(setFromDB);

    if (setFromRequest.isEmpty()) return;

    setFromRequest.stream()
        .filter(feed -> feed.getName() != null && feed.getName().contains("_data_"))
        .forEach(feed -> processNewFile(feed, request, blockedFailedBC, fileMap, responseList));
}

private void processNewFile(
        SixFeedFilesDTO feed, 
        SixFeedFilesDeltaRequest request, 
        Set<String> blockedFailedBC, 
        Map<String, List<String>> fileMap, 
        List<SixFeedFilesDeltaResponse> responseList) {

    String parentName = feed.getName();
    String bc = stripBC(parentName);

    if (!blockedFailedBC.contains(bc)) {
        try {
            SixFeedFilesDelta delta = new SixFeedFilesDelta();
            delta.generateUniqueId();
            delta.setFeedId(feed.getFeedId());
            delta.setProcessId(feed.getProcessId());
            delta.setProcessDate(getSQLDate(request.getProcessDate()));
            delta.setFilename(feed.getName());
            delta.setChildFilename(feed.getName());
            delta.setType(feed.getType());
            delta.setStatus("NEW");
            delta.setCreatedOn(DateUtil.currentDateTimeInUTC());

            fileDeltaRepository.save(delta);

            SixFeedFilesDeltaResponse feedResponse = new SixFeedFilesDeltaResponse();
            feedResponse.setFeedId(request.getFeedId());
            feedResponse.setProcessId(request.getProcessId());
            feedResponse.setProcessDate(request.getProcessDate());

            addToFileMap(fileMap, bc, parentName);
            responseList.add(feedResponse);
        } catch (Exception e) {
            log.error("Exception while inserting: " + e);
        }
    } else {
        fileMap.remove(bc);
    }
}

private List<SixFeedFilesDeltaDTO> createFeedGroup(Map<String, List<String>> fileMap) {
    return fileMap.entrySet().stream()
        .map(entry -> {
            SixFeedFilesDeltaDTO dto = new SixFeedFilesDeltaDTO();
            dto.setBCName(entry.getKey());
            dto.setFileNames(entry.getValue());
            return dto;
        })
        .collect(Collectors.toList());
}
