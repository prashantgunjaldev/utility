import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
class MorningstarGetUniverseTaskletTest {

    @InjectMocks
    private MorningstarGetUniverseTasklet tasklet;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private MorningstarGetUniverseWorker morningstarGetUniverseWorker;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private StepContext stepContext;

    @Mock
    private StepExecution stepExecution;

    @Mock
    private JobExecution jobExecution;

    @Mock
    private ExecutionContext executionContext;

    @BeforeEach
    void setUp() {
        tasklet.restTemplate = restTemplate;
        tasklet.universeEndpoint = "http://example.com/api";
        tasklet.clientId = "client123";
        tasklet.filePath = "/tmp/data.csv";
    }

    @Test
    void testExecute_Success() throws Exception {
        // Mock Execution Context
        when(chunkContext.getStepContext()).thenReturn(stepContext);
        when(stepContext.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);

        List<String> mockCookies = Collections.singletonList("cookie123");
        when(executionContext.get("cookies")).thenReturn(mockCookies);

        // Mock Job Parameters
        when(jobExecution.getJobParameters().getString("startDate")).thenReturn("2025-03-14");

        // Call execute method
        tasklet.execute(stepContribution, chunkContext);

        // Verify method calls
        verify(morningstarGetUniverseWorker).setTemplate(restTemplate);
        verify(morningstarGetUniverseWorker).setFilePath("/tmp/data.csv");
        verify(morningstarGetUniverseWorker).setUniverseEndpoint("http://example.com/api");
        verify(morningstarGetUniverseWorker).setClientId("client123");
        verify(morningstarGetUniverseWorker).setStartDate("2025-03-14");
        verify(morningstarGetUniverseWorker).execute(mockCookies);
    }

    @Test
    void testExecute_WithDefaultDate() throws Exception {
        // Mock Execution Context
        when(chunkContext.getStepContext()).thenReturn(stepContext);
        when(stepContext.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);

        List<String> mockCookies = Collections.singletonList("cookie123");
        when(executionContext.get("cookies")).thenReturn(mockCookies);

        // Mock Job Parameters (No startDate provided)
        when(jobExecution.getJobParameters().getString("startDate")).thenReturn(null);

        // Generate expected date
        String expectedDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

        // Call execute method
        tasklet.execute(stepContribution, chunkContext);

        // Verify method calls
        verify(morningstarGetUniverseWorker).setStartDate(expectedDate);
    }
}
