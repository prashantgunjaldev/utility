package com.example.filter;

import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.ContentCachingRequestWrapper;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
@Order(-104) // Run before Spring Security filters
public class LoggingFilter extends OncePerRequestFilter {

    private static final Logger logger = LoggerFactory.getLogger(LoggingFilter.class);

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        
        // Wrap the request to allow multiple reads
        ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(request);

        // Force the request body to be read and cached
        wrappedRequest.getParameterMap(); // Ensures parameters are cached
        forceReadRequestBody(wrappedRequest);

        logRequest(wrappedRequest);

        // Proceed with the filter chain
        filterChain.doFilter(wrappedRequest, response);
    }

    private void logRequest(ContentCachingRequestWrapper request) {
        String ipAddress = request.getRemoteAddr();
        String method = request.getMethod();
        String requestURI = request.getRequestURI();
        String requestBody = getRequestBody(request);

        logger.info("Request: IP={}, Method={}, URI={}, Body={}", ipAddress, method, requestURI, requestBody);
    }

    private void forceReadRequestBody(ContentCachingRequestWrapper request) throws IOException {
        // Force reading request body to make it available for logging
        request.getInputStream().readAllBytes();
    }

    private String getRequestBody(ContentCachingRequestWrapper request) {
        byte[] buf = request.getContentAsByteArray();
        if (buf.length > 0) {
            return new String(buf, StandardCharsets.UTF_8);
        }
        return "N/A";
    }
}
