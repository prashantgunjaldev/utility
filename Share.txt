import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SixFeedFilesDeltaServiceTest {

    private static final Logger log = LoggerFactory.getLogger(SixFeedFilesDeltaServiceTest.class);

    @Mock
    private SixFeedFilesDeltaRepository fileDeltaRepository;

    @Mock
    private SixFileAuditRepository fileAuditRepository;

    @Mock
    private ProcessExecutionTrackerService trackerService;

    @InjectMocks
    private SixFeedFilesDeltaService sixFeedFilesDeltaService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testAddDeltaFileFromDb() {
        // Given
        SixFeedFilesDeltaResponse feedResponse = new SixFeedFilesDeltaResponse();
        feedResponse.setProcessId("123");

        SixFeedFilesDelta file1 = new SixFeedFilesDelta("fileA_001.txt");
        SixFeedFilesDelta file2 = new SixFeedFilesDelta("fileA_002.txt");
        SixFeedFilesDelta file3 = new SixFeedFilesDelta("fileB_001.txt");

        List<SixFeedFilesDelta> mockFiles = Arrays.asList(file1, file2, file3);

        when(fileDeltaRepository.findProcessIdBasedDelta("123")).thenReturn(mockFiles);

        // When
        sixFeedFilesDeltaService.addDeltaFileFromDb(feedResponse);

        // Then
        assertThat(feedResponse.getFileGroup()).isNotNull();
        assertThat(feedResponse.getFileGroup().size()).isEqualTo(2); // Two BC groups (A & B)

        verify(fileDeltaRepository, times(1)).findProcessIdBasedDelta("123");

        log.info("Test completed successfully.");
    }
}
