<!-- Mockito with inline mocking support -->
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-inline</artifactId>
    <version>4.0.0</version> <!-- or compatible with your Spring Boot 2 version -->
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-junit-jupiter</artifactId>
    <version>5.12.0</version>
    <scope>test</scope>
</dependency>


import com.microsoft.aad.msal4j.*;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.graph.GraphServiceClient;
import com.microsoft.graph.models.DirectoryObject;
import com.microsoft.graph.models.Group;
import com.microsoft.graph.requests.GraphServiceClient;
import com.microsoft.graph.requests.DirectoryObjectCollectionResponse;
import com.microsoft.graph.requests.GraphServiceClient;
import com.microsoft.graph.requests.GroupCollectionPage;
import com.microsoft.graph.requests.GroupCollectionRequestBuilder;
import okhttp3.Request;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.test.util.ReflectionTestUtils;
import reactor.core.publisher.Mono;

import java.util.*;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AADSecurityUtilTest {

    @InjectMocks
    private AADSecurityUtil aadSecurityUtil;

    @Mock
    private ConfidentialClientApplication mockApp;

    @Mock
    private IAuthenticationResult mockResult;

    @Mock
    private CompletableFuture<IAuthenticationResult> mockFuture;

    @Mock
    private DefaultAzureCredential mockCredential;

    @BeforeEach
    public void setup() throws Exception {
        ReflectionTestUtils.setField(aadSecurityUtil, "newClientId", "test-client-id");
        ReflectionTestUtils.setField(aadSecurityUtil, "newClientSecret", "test-secret");
        ReflectionTestUtils.setField(aadSecurityUtil, "tenantId", "test-tenant-id");
    }

    @Test
    void testGenerateToken() throws Exception {
        when(mockApp.acquireToken(any(ClientCredentialParameters.class))).thenReturn(mockFuture);
        when(mockFuture.get()).thenReturn(mockResult);
        when(mockResult.accessToken()).thenReturn("mocked-access-token");

        // Inject mockApp into util
        ReflectionTestUtils.setField(aadSecurityUtil, "confidentialClientApplication", mockApp);

        String token = aadSecurityUtil.generateToken();
        assertEquals("mocked-access-token", token);
    }

    @Test
    void testGetTokenByScope() throws Exception {
        when(mockApp.acquireToken(any(ClientCredentialParameters.class))).thenReturn(mockFuture);
        when(mockFuture.get()).thenReturn(mockResult);
        when(mockResult.accessToken()).thenReturn("mocked-token-scope");

        ReflectionTestUtils.setField(aadSecurityUtil, "confidentialClientApplication", mockApp);

        String token = aadSecurityUtil.getTokenByScope("https://graph.microsoft.com/.default");
        assertEquals("mocked-token-scope", token);
    }

    @Test
    void testGetUserAccessToken() {
        // Mock credential.getToken() to return token with access token
        com.azure.core.credential.AccessToken mockAccessToken =
                new com.azure.core.credential.AccessToken("user-access-token", OffsetDateTime.now().plusHours(1));

        DefaultAzureCredential credential = mock(DefaultAzureCredential.class);
        when(credential.getToken(any())).thenReturn(Mono.just(mockAccessToken));
        ReflectionTestUtils.setField(aadSecurityUtil, "credential", credential);

        String token = aadSecurityUtil.getUserAccessToken();
        assertEquals("user-access-token", token);
    }

    @Test
    void testGetSecurityGroupById() {
        Group mockGroup = new Group();
        mockGroup.displayName = "Test Group";

        GraphServiceClient<Request> mockGraphClient = mock(GraphServiceClient.class);
        GraphServiceClient.GroupsCollectionRequestBuilder groupsBuilder = mock(GraphServiceClient.GroupsCollectionRequestBuilder.class);
        GroupCollectionRequestBuilder groupRequestBuilder = mock(GroupCollectionRequestBuilder.class);

        when(mockGraphClient.groups()).thenReturn(groupsBuilder);
        when(groupsBuilder.byId(anyString())).thenReturn(groupRequestBuilder);
        when(groupRequestBuilder.buildRequest()).thenReturn(mock(GroupCollectionRequestBuilder.GroupRequest.class));
        when(groupRequestBuilder.buildRequest().get()).thenReturn(mockGroup);

        ReflectionTestUtils.setField(aadSecurityUtil, "graphClient", mockGraphClient);

        Group result = aadSecurityUtil.getSecurityGroupById("test-id");
        assertEquals("Test Group", result.displayName);
    }

    @Test
    void testGetSecurityGroups() {
        Group mockGroup = new Group();
        mockGroup.displayName = "Group A";

        List<Group> groupList = Collections.singletonList(mockGroup);
        GroupCollectionPage mockPage = mock(GroupCollectionPage.class);
        when(mockPage.getCurrentPage()).thenReturn(groupList);

        GraphServiceClient<Request> mockGraphClient = mock(GraphServiceClient.class);
        GraphServiceClient.GroupsCollectionRequestBuilder groupsBuilder = mock(GraphServiceClient.GroupsCollectionRequestBuilder.class);
        GroupCollectionRequestBuilder groupRequestBuilder = mock(GroupCollectionRequestBuilder.class);

        when(mockGraphClient.groups()).thenReturn(groupsBuilder);
        when(groupsBuilder.buildRequest()).thenReturn(groupRequestBuilder);
        when(groupRequestBuilder.select("id,displayName").get()).thenReturn(mockPage);

        ReflectionTestUtils.setField(aadSecurityUtil, "graphClient", mockGraphClient);

        List<Group> result = aadSecurityUtil.getSecurityGroups();
        assertEquals(1, result.size());
        assertEquals("Group A", result.get(0).displayName);
    }
}

