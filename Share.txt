import com.ubs.cumulus.parsingService.xml.morningstar.dto.MorningStarDTO;
import com.ubs.cumulus.parsingService.xml.morningstar.model.MorningstarList;
import com.ubs.cumulus.parsingService.xml.morningstar.util.MorningStarInsertValues;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.*;

import static org.mockito.Mockito.*;

public class MorningStarInsertValuesTest {

    @InjectMocks
    private MorningStarInsertValues insertValues;

    @Mock
    private Connection connection;

    @Mock
    private PreparedStatement preparedStatement;

    @Mock
    private MorningstarList morningstarList;

    @Mock
    private MorningStarDTO request;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(request.getTimeStamp()).thenReturn("2024-01-01 10:00:00");
    }

    private List<Map<String, Object>> createTestData() {
        Map<String, Object> row = new HashMap<>();
        row.put("loadtimestamp", "2024-01-01 10:00:00");
        row.put("process_id", "123");
        row.put("feedid", "feed-1");
        row.put("region", "US");
        row.put("filename", "file.xml");
        row.put("businessdate", "2024-01-01");
        row.put("transaction_id", "tx123");
        row.put("type_of_data", "NAV");

        return Collections.singletonList(row);
    }

    @Test
    public void testSuccessfulInsert() throws Exception {
        List<Map<String, Object>> data = createTestData();
        when(morningstarList.getXmlParsedValuesMapList()).thenReturn(data);

        when(preparedStatement.executeBatch()).thenReturn(new int[]{1});

        insertValues.insert(morningstarList, request, connection);

        verify(preparedStatement, atLeastOnce()).setString(anyInt(), anyString());
        verify(preparedStatement, times(1)).executeBatch();
    }

    @Test
    public void testRetryAndSuccessOnSecondAttempt() throws Exception {
        List<Map<String, Object>> data = createTestData();
        when(morningstarList.getXmlParsedValuesMapList()).thenReturn(data);

        when(preparedStatement.executeBatch())
                .thenThrow(new SQLException("DB down"))
                .thenReturn(new int[]{1}); // Success on retry

        insertValues.insert(morningstarList, request, connection);

        verify(preparedStatement, times(2)).executeBatch();
    }

    @Test
    public void testRetryExceedsMaxAndThrows() throws Exception {
        List<Map<String, Object>> data = createTestData();
        when(morningstarList.getXmlParsedValuesMapList()).thenReturn(data);

        when(preparedStatement.executeBatch()).thenThrow(new SQLException("Always fail"));

        try {
            insertValues.insert(morningstarList, request, connection);
        } catch (RuntimeException e) {
            // Expected
        }

        verify(preparedStatement, times(4)).executeBatch(); // 3 retries + 1 original
    }
}
