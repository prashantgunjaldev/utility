import org.w3c.dom.*;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.*;
import java.io.StringReader;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class XMLParserUtil {
    private static final String EVALUATION_PROCESSING_ERROR = "Error processing expression ";

    private static final ThreadLocal<DocumentBuilder> documentBuilderThreadLocal = ThreadLocal.withInitial(() -> {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            factory.setIgnoringComments(true);
            factory.setIgnoringElementContentWhitespace(true);
            return factory.newDocumentBuilder();
        } catch (Exception e) {
            throw new RuntimeException("Error initializing DocumentBuilder", e);
        }
    });

    private static final XPathFactory XPATH_FACTORY = XPathFactory.newInstance();
    private static final XPath XPATH = XPATH_FACTORY.newXPath();

    private final Map<String, XPathExpression> compiledXPathsForStrings = new ConcurrentHashMap<>();
    private final Map<String, XPathExpression> compiledXPaths = new ConcurrentHashMap<>();

    public void setUp(List<XPathMappingEntity> xpathMappings) {
        try {
            for (XPathMappingEntity entity : xpathMappings) {
                XPathExpression compiledExpr = XPATH.compile(entity.getXpath());
                if ("String".equals(entity.getColumn_type())) {
                    compiledXPathsForStrings.put(entity.getColumn_name(), compiledExpr);
                } else {
                    compiledXPaths.put(entity.getColumn_name(), compiledExpr);
                }
            }
            log.info("XPath expressions compiled and cached");
        } catch (XPathExpressionException e) {
            log.error("Error while compiling XPath: {}", e.getMessage());
        }
    }

    public XmlParsedValuesMap parseXML(String xml) {
        XmlParsedValuesMap parsedValues = new XmlParsedValuesMap();
        Map<String, Object> flattenedMap = new HashMap<>();
        Map<String, Object> listMap = new HashMap<>();

        try {
            DocumentBuilder builder = documentBuilderThreadLocal.get();
            Document doc = builder.parse(new InputSource(new StringReader(xml)));

            for (Map.Entry<String, XPathExpression> entry : compiledXPaths.entrySet()) {
                fetchAndStoreNodeValue(entry, doc, listMap);
            }

            for (Map.Entry<String, XPathExpression> entry : compiledXPathsForStrings.entrySet()) {
                fetchAndStoreNodeValue(entry, doc, flattenedMap);
            }

            log.info("Parsed XML successfully: flattenedMap size = {}, listMap size = {}", flattenedMap.size(), listMap.size());
            parsedValues.setFlattenedValuesMap(flattenedMap);
            parsedValues.setListValuesMap(listMap);
        } catch (Exception e) {
            throw new RuntimeException("Error processing XML using XPath", e);
        }

        return parsedValues;
    }

    private static void fetchAndStoreNodeValue(Map.Entry<String, XPathExpression> entry, Document doc, Map<String, Object> targetMap) {
        String columnName = entry.getKey();
        XPathExpression expr = entry.getValue();

        try {
            String result = expr.evaluate(doc);
            targetMap.put(columnName, result.isEmpty() ? null : result);
        } catch (Exception e) {
            log.error("Error evaluating XPath '{}': {}", columnName, e.getMessage());
        }
    }

    public Object getXmlNodeValue(String xPathExpression, Class<?> type, String xmlContent) {
        try {
            DocumentBuilder builder = documentBuilderThreadLocal.get();
            Document doc = builder.parse(new InputSource(new StringReader(xmlContent)));

            return nodeListV2(xPathExpression, doc).map(Node::getTextContent).map(this::checkString).collect(Collectors.toList());
        } catch (Exception e) {
            log.error("Error parsing XML with XPath '{}': {}", xPathExpression, e.getMessage());
            return null;
        }
    }

    private String checkString(String value) {
        return value != null ? value.trim() : "";
    }

    private static XPathExpression getXPathExpression(String xPathExpression) throws XPathExpressionException {
        return XPATH.compile(xPathExpression);
    }

    public Stream<Node> nodeListV2(String xPathExpression, Document doc) {
        try {
            XPathExpression expr = getXPathExpression(xPathExpression);
            NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
            Node[] nodes = new Node[nl.getLength()];

            for (int i = 0; i < nl.getLength(); i++) {
                nodes[i] = nl.item(i);
            }

            return Stream.of(nodes);
        } catch (XPathExpressionException e) {
            throw new RuntimeException(EVALUATION_PROCESSING_ERROR + xPathExpression, e);
        }
    }

    public String evaluate(String expression, Node node) {
        if (node == null) {
            return null;
        }
        try {
            return XPATH.evaluate(expression, node);
        } catch (XPathExpressionException e) {
            throw new RuntimeException(EVALUATION_PROCESSING_ERROR + expression, e);
        }
    }
}
