import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;

class FileDownloadControllerTest {

    private MockMvc mockMvc;

    @Mock
    private StreamFileDownloadServiceImpl streamFileDownloadServiceImpl;

    @Mock
    private Authentication authentication;

    @InjectMocks
    private FileDownloadController fileDownloadController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(fileDownloadController).build();
    }

    @Test
    void testDownloadFileBySASUrl_Success() throws Exception {
        when(streamFileDownloadServiceImpl.getSasUrl(any(), any())).thenReturn("https://example.com/file");

        mockMvc.perform(post("/download")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"fileName\":\"test.txt\"}"))
                .andExpect(status().isSeeOther());

        verify(streamFileDownloadServiceImpl, times(1)).getSasUrl(any(), any());
    }

    @Test
    void testDownloadFileBySASUrl_InvalidRequest() throws Exception {
        mockMvc.perform(post("/download")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}"))
                .andExpect(status().isBadRequest());

        verify(streamFileDownloadServiceImpl, never()).getSasUrl(any(), any());
    }

    @Test
    void testDownloadFileBySASUrl_Unauthorized() throws Exception {
        mockMvc.perform(post("/download")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"fileName\":\"test.txt\"}"))
                .andExpect(status().isForbidden());
    }
}
