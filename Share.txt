import jakarta.annotation.PostConstruct;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import java.time.Duration;
import java.util.concurrent.atomic.AtomicReference;

@Service
public class SSEPollingService {

    private final WebClient webClient;
    private final AtomicReference<String> jwtToken = new AtomicReference<>("initial-token");

    private final Duration pollInterval = Duration.ofSeconds(10);  // Configurable delay between polls
    private final Duration initialDelay = Duration.ofSeconds(10); // Start 10 seconds after app boot

    public SSEPollingService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .baseUrl("https://your-api-host.com") // Replace with actual base URL
                .build();
    }

    @PostConstruct
    public void init() {
        // Start after 10 seconds
        Mono.delay(initialDelay)
                .doOnNext(tick -> startPolling())
                .subscribe();
    }

    private void startPolling() {
        System.out.println("[SSEPollingService] Started polling loop...");

        Flux.interval(Duration.ZERO, pollInterval)
                .flatMap(tick -> pollSSEEndpoint()
                        .onErrorResume(ex -> {
                            System.err.println("[SSEPollingService] Error during poll: " + ex.getMessage());
                            return Flux.empty(); // Continue polling on error
                        }))
                .retry() // Infinite retry in case the Flux fails entirely
                .subscribeOn(Schedulers.boundedElastic())
                .subscribe(this::handleSseEvent, error -> {
                    System.err.println("[SSEPollingService] Fatal error: " + error.getMessage());
                });
    }

    private Flux<String> pollSSEEndpoint() {
        return webClient.get()
                .uri("/your/sse/endpoint") // Replace with actual SSE endpoint
                .accept(MediaType.TEXT_EVENT_STREAM)
                .header("Authorization", "Bearer " + jwtToken.get())
                .retrieve()
                .bodyToFlux(String.class)
                .onErrorResume(ex -> {
                    if (isTokenExpired(ex)) {
                        System.out.println("[SSEPollingService] Token expired, refreshing...");
                        return refreshToken()
                                .flatMapMany(newToken -> {
                                    jwtToken.set(newToken);
                                    return pollSSEEndpoint(); // Retry once with new token
                                });
                    }
                    return Flux.error(ex);
                });
    }

    private boolean isTokenExpired(Throwable ex) {
        return ex.getMessage() != null && ex.getMessage().contains("401");
    }

    private Mono<String> refreshToken() {
        return webClient.post()
                .uri("/auth/refresh") // Replace with your actual refresh endpoint
                .retrieve()
                .bodyToMono(String.class)
                .doOnNext(token -> System.out.println("[SSEPollingService] Token refreshed"))
                .onErrorResume(e -> {
                    System.err.println("[SSEPollingService] Token refresh failed: " + e.getMessage());
                    return Mono.error(new RuntimeException("Token refresh failed", e));
                });
    }

    private void handleSseEvent(String eventData) {
        System.out.println("[SSEPollingService] Received SSE event: " + eventData);
        // Replace this with actual event processing logic
    }
}
