import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.MockFilterChain;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.util.ContentCachingRequestWrapper;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.io.IOException;
import java.util.UUID;

import static org.mockito.Mockito.*;

class RequestResponseLoggingFilterTest {

    @Mock
    private ApiLogService apiLogService;

    private RequestResponseLoggingFilter filter;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        filter = new RequestResponseLoggingFilter(apiLogService);
    }

    @Test
    void testDoFilterInternal() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        MockFilterChain filterChain = new MockFilterChain();

        request.setMethod("GET");
        request.setRequestURI("/test");
        request.addHeader("X-Test-Header", "HeaderValue");
        request.setContent("Test Body".getBytes());

        filter.doFilterInternal(request, response, filterChain);

        verify(apiLogService, atLeastOnce()).log(any());
    }

    @Test
    void testLogRequest() throws IOException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setMethod("POST");
        request.setRequestURI("/test");
        request.addHeader("Content-Type", "application/json");
        request.setContent("{\"key\":\"value\"}".getBytes());

        ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(request);
        String uniqueId = UUID.randomUUID().toString();

        filter.logRequest(wrappedRequest, uniqueId);

        verify(apiLogService, times(1)).log(any());
    }
}
