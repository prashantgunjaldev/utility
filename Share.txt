import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.HashMap;
import java.util.Map;

@Configuration
@ConditionalOnProperty(name = "logging.db.enabled", havingValue = "true")
public class LoggingDataSourceConfig {

    @Value("${logging.db.url}")
    private String dbUrl;

    @Value("${logging.db.username}")
    private String dbUsername;

    @Value("${logging.db.password}")
    private String dbPassword;

    @Value("${logging.db.platform:postgres}")
    private String dbPlatform;

    @Bean
    public EntityManagerFactory loggingEntityManagerFactory() {
        Map<String, String> properties = new HashMap<>();
        properties.put("javax.persistence.jdbc.url", dbUrl);
        properties.put("javax.persistence.jdbc.user", dbUsername);
        properties.put("javax.persistence.jdbc.password", dbPassword);
        properties.put("hibernate.dialect", getHibernateDialect(dbPlatform));
        properties.put("hibernate.hbm2ddl.auto", "update");

        return Persistence.createEntityManagerFactory("LoggingPersistenceUnit", properties);
    }

    private String getHibernateDialect(String dbPlatform) {
        switch (dbPlatform.toLowerCase()) {
            case "postgres":
                return "org.hibernate.dialect.PostgreSQLDialect";
            case "mysql":
                return "org.hibernate.dialect.MySQL8Dialect";
            case "oracle":
                return "org.hibernate.dialect.Oracle12cDialect";
            default:
                throw new IllegalArgumentException("Unsupported database platform: " + dbPlatform);
        }
    }
}

=====================

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;

@Component
public class LoggingEntityManagerProvider {
    
    private final EntityManagerFactory entityManagerFactory;

    public LoggingEntityManagerProvider(EntityManagerFactory loggingEntityManagerFactory) {
        this.entityManagerFactory = loggingEntityManagerFactory;
    }

    public EntityManager getEntityManager() {
        return entityManagerFactory.createEntityManager();
    }
}
