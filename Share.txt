import javax.xml.xpath.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import java.io.StringReader;
import java.util.*;
import org.xml.sax.InputSource;

public class OptimizedXPathParser {
    private final Map<String, XPathExpression> compiledXPaths;

    public OptimizedXPathParser(List<XPathMappingEntity> xpathMappings) {
        try {
            XPathFactory factory = XPathFactory.newInstance();
            XPath xpath = factory.newXPath();
            compiledXPaths = new HashMap<>();
            for (XPathMappingEntity entity : xpathMappings) {
                compiledXPaths.put(entity.getColumnName(), xpath.compile(entity.getXPath()));
            }
        } catch (XPathExpressionException e) {
            throw new RuntimeException("Error compiling XPath expressions", e);
        }
    }

    public XmlParsedValuesMap parseXML(String xml) {
        XmlParsedValuesMap parsedValues = new XmlParsedValuesMap();
        parsedValues.setFlattenedValues(new HashMap<>());
        parsedValues.setListValuesMap(new HashMap<>());

        try {
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            Document doc = builder.parse(new InputSource(new StringReader(xml)));

            for (Map.Entry<String, XPathExpression> entry : compiledXPaths.entrySet()) {
                String columnName = entry.getKey();
                XPathExpression expr = entry.getValue();
                String result = expr.evaluate(doc);
                if (!result.isEmpty()) {
                    parsedValues.getFlattenedValues().put(columnName, result);
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("Error processing XML using XPath", e);
        }

        return parsedValues;
    }
}
