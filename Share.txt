<!-- Mockito with inline mocking support -->
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-inline</artifactId>
    <version>4.0.0</version> <!-- or compatible with your Spring Boot 2 version -->
    <scope>test</scope>
</dependency>


import com.azure.core.credential.AccessToken;
import com.azure.core.credential.TokenRequestContext;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.Mockito;
import reactor.core.publisher.Mono;

import java.time.OffsetDateTime;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;

class AzureTokenGeneratorTest {

    @Test
    void testGetADFTokenWithoutCodeChange() {
        // Create a mock AccessToken
        AccessToken mockToken = new AccessToken("mock-token", OffsetDateTime.now().plusMinutes(10));

        try (
            // Mock the constructor of DefaultAzureCredentialBuilder
            MockedConstruction<DefaultAzureCredentialBuilder> mockedBuilder =
                    Mockito.mockConstruction(DefaultAzureCredentialBuilder.class, (builder, context) -> {
                        DefaultAzureCredential mockCredential = Mockito.mock(DefaultAzureCredential.class);
                        Mockito.when(builder.managedIdentityClientId(any())).thenReturn(builder);
                        Mockito.when(builder.tenantId(any())).thenReturn(builder);
                        Mockito.when(builder.build()).thenReturn(mockCredential);

                        Mockito.when(mockCredential.getToken(any(TokenRequestContext.class)))
                                .thenReturn(Mono.just(mockToken));
                    })
        ) {
            AzureTokenGenerator generator = new AzureTokenGenerator();
            // Set fields via reflection (if not using Spring context)
            setPrivateField(generator, "clientId", "mock-client-id");
            setPrivateField(generator, "tenantId", "mock-tenant-id");

            String token = generator.getADFAccesToken();
            assertEquals("mock-token", token);
        }
    }

    private void setPrivateField(Object target, String fieldName, Object value) {
        try {
            var field = target.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(target, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
