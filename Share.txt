private Flux<String> pollSSEOnce() {
    System.out.println("[SSEPollingService] Making API call...");

    return tokenService.getToken()
            .flatMapMany(token -> webClient.get()
                    .uri("/your/sse/endpoint")
                    .accept(MediaType.TEXT_EVENT_STREAM)
                    .header("Authorization", "Bearer " + token)
                    .exchangeToFlux(response -> {
                        if (response.statusCode().value() == 401) {
                            return Flux.error(new RuntimeException("401 Unauthorized"));
                        }

                        // âœ… Log response headers
                        System.out.println("[SSEPollingService] Response Headers:");
                        response.headers().asHttpHeaders().forEach((key, value) ->
                                System.out.println("  " + key + ": " + value)
                        );

                        return response.bodyToFlux(String.class)
                                .doOnComplete(() -> System.out.println("[SSEPollingService] Got response, waiting 10s..."))
                                .doOnNext(data -> System.out.println("[SSEPollingService] Received: " + data));
                    })
            )
            .onErrorResume(ex -> {
                if (isUnauthorized(ex)) {
                    System.out.println("[SSEPollingService] 401 detected, refreshing token and retrying...");
                    return tokenService.refreshToken()
                            .thenMany(pollSSEOnce()); // Retry after refresh
                }
                System.err.println("[SSEPollingService] Error occurred: " + ex.getMessage());
                return Flux.empty(); // Continue loop even if error
            });
}
