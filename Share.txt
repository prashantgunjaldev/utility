import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;

class FileFeedServiceImplTest {

    @InjectMocks
    private FileFeedServiceImpl fileFeedService;

    @Mock
    private DatasetMapper datasetMapper;

    @Mock
    private RestTemplate restTemplate;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSaveCSVSchemaToDataset() {
        // Mocking inputs
        FileSchema fileSchema = mock(FileSchema.class);
        when(fileSchema.getParserType()).thenReturn(ParserType.CSV);
        when(fileSchema.getDatasetId()).thenReturn("123");

        String fileFeedId = "feed123";
        String feedGroupId = "group123";
        Boolean isMultipleSchema = false;

        // Mocking DatasetMapper methods
        doNothing().when(datasetMapper).addTechnicalColumns(any(Dataset.class), eq(isMultipleSchema));
        doNothing().when(datasetMapper).addHeaderColumns(any(Dataset.class));

        // Mocking RestTemplate call
        ResponseEntity<String> mockResponse = new ResponseEntity<>("Success", HttpStatus.CREATED);
        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(),
                eq(String.class)
        )).thenReturn(mockResponse);

        // Executing the method
        assertDoesNotThrow(() -> 
            fileFeedService.saveCSVSchemaToDataset(fileSchema, fileFeedId, feedGroupId, isMultipleSchema)
        );

        // Verifying interactions
        verify(datasetMapper, times(1)).addTechnicalColumns(any(Dataset.class), eq(isMultipleSchema));
        verify(datasetMapper, times(1)).addHeaderColumns(any(Dataset.class));
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(), eq(String.class));
    }
}
