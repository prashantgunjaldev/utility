public List<Group> getAllGroups(String displayNameFilter) {
        List<Group> groups = new ArrayList<>();
        try {
            HttpClient httpClient = HttpClient.newHttpClient();
            TokenCredential credential = new DefaultAzureCredentialBuilder().build();

            // Get access token
            AccessToken token = credential.getToken(
                new TokenRequestContext().addScopes("https://graph.microsoft.com/.default")
            ).block();

            String baseUrl = "https://graph.microsoft.com/v1.0/groups?$top=100";

            // Add filter if provided
            if (displayNameFilter != null && !displayNameFilter.isEmpty()) {
                String encodedFilter = URLEncoder.encode("displayName eq '" + displayNameFilter + "'", StandardCharsets.UTF_8);
                baseUrl += "&$filter=" + encodedFilter;
            }

            String url = baseUrl;
            ObjectMapper mapper = new ObjectMapper();

            while (url != null) {
                HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + token.getToken())
                    .header("Accept", "application/json")
                    .build();

                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

                JsonNode json = mapper.readTree(response.body());

                for (JsonNode groupNode : json.get("value")) {
                    Group group = new Group();
                    group.setId(groupNode.get("id").asText());
                    group.setDisplayName(groupNode.get("displayName").asText());
                    groups.add(group);
                }

                JsonNode nextLink = json.get("@odata.nextLink");
                url = (nextLink != null && !nextLink.isNull()) ? nextLink.asText() : null;
            }

        } catch (Exception e) {
            throw new RuntimeException("Error fetching groups from Microsoft Graph", e);
        }

        return groups;
    }
