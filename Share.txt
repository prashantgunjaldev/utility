import static org.mockito.Mockito.*;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.UUID;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.ContentCachingRequestWrapper;
import org.springframework.mock.web.ContentCachingResponseWrapper;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

class RequestResponseLoggingFilterTest {

    @Mock
    private ApiLogService apiLogService;

    @Mock
    private FilterChain filterChain;

    @InjectMocks
    private RequestResponseLoggingFilter filter;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testFilterLogsRequestAndResponse() throws ServletException, IOException {
        // Create mock request & response
        MockHttpServletRequest mockRequest = new MockHttpServletRequest("POST", "/test-endpoint");
        mockRequest.setContent("test-body".getBytes(StandardCharsets.UTF_8));
        mockRequest.addHeader("Authorization", "Bearer token");

        MockHttpServletResponse mockResponse = new MockHttpServletResponse();
        mockResponse.setStatus(200);
        mockResponse.getOutputStream().write("response-body".getBytes(StandardCharsets.UTF_8));

        // Wrap in ContentCaching wrappers
        ContentCachingRequestWrapper requestWrapper = new ContentCachingRequestWrapper(mockRequest);
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(mockResponse);

        // Manually invoke the filter
        filter.doFilterInternal(requestWrapper, responseWrapper, filterChain);

        // Capture the log object passed to ApiLogService
        ArgumentCaptor<ApiLog> logCaptor = ArgumentCaptor.forClass(ApiLog.class);
        verify(apiLogService, atLeastOnce()).log(logCaptor.capture());

        ApiLog loggedRequest = logCaptor.getAllValues().get(0);
        ApiLog loggedResponse = logCaptor.getAllValues().get(1);

        // Validate request log
        assertEquals("/test-endpoint", loggedRequest.getRequestURI());
        assertEquals("test-body", loggedRequest.getPayload());
        assertEquals("REQUEST", loggedRequest.getType());

        // Validate response log
        assertEquals(200, loggedResponse.getStatus());
        assertEquals("response-body", loggedResponse.getPayload());
        assertEquals("RESPONSE", loggedResponse.getType());
    }
}
