import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Field;

import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
class AccessTokenGeneratorTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private AccessTokenGenerator accessTokenGenerator;

    private final String tokenGeneratorUri = "http://mock-api/token";
    private final String clientId = "mock-client-id";
    private final String clientSecret = "mock-client-secret";
    private final String scope = "mock-scope";
    private final String mockResponse = "{\"access_token\": \"mocked-token\"}";

    @BeforeEach
    void setUp() throws Exception {
        setPrivateField(accessTokenGenerator, "tokenGeneratorUri", tokenGeneratorUri);
        setPrivateField(accessTokenGenerator, "spClientId", clientId);
        setPrivateField(accessTokenGenerator, "spKey", clientSecret);
        setPrivateField(accessTokenGenerator, "scope", scope);
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    @Test
    void testGenerateToken_Success() throws Exception {
        ResponseEntity<String> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        when(restTemplate.postForEntity(eq(tokenGeneratorUri), any(HttpEntity.class), eq(String.class)))
                .thenReturn(responseEntity);

        String accessToken = accessTokenGenerator.generateToken();

        assertNotNull(accessToken);
        assertEquals("mocked-token", accessToken);

        verify(restTemplate, times(1)).postForEntity(eq(tokenGeneratorUri), any(HttpEntity.class), eq(String.class));
    }

    @Test
    void testGenerateToken_ThrowsException() {
        when(restTemplate.postForEntity(eq(tokenGeneratorUri), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new RuntimeException("API call failed"));

        Exception exception = assertThrows(RuntimeException.class, () -> accessTokenGenerator.generateToken());

        assertEquals("API call failed", exception.getMessage());
    }
}
