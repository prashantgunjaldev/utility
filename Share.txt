package com.exampl.batch.service;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.List;

@Service
public class ParallelHttpService {

    private final WebClient webClient;

    public ParallelHttpService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    public List<String> fetchDataInParallel(List<String> urls) {
        return Flux.fromIterable(urls)
                .flatMap(this::fetchData, 10) // Limit concurrency if needed
                .collectList()
                .block(); // Convert Flux to List (blocking)
    }

    private Mono<String> fetchData(String url) {
        return webClient.get()
                .uri(url)
                .retrieve()
                .bodyToMono(String.class)
                .timeout(java.time.Duration.ofSeconds(15))
                .onErrorResume(e -> Mono.just("Error fetching: " + url));
    }
}


public ParallelHttpService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .clientConnector(new reactor.netty.http.client.HttpClientConnector(httpClientWithProxy()))
                .build();
    }

    private HttpClient httpClientWithProxy() {
        return HttpClient.create()
                .proxy(proxy -> proxy.type(ProxyProvider.Proxy.HTTP)
                        .host("your.proxy.host")  // ðŸ”¹ Proxy Host
                        .port(8080)               // ðŸ”¹ Proxy Port
                        .username("yourUsername") // ðŸ”¹ (Optional) Proxy Username
                        .password(pass -> "yourPassword") // ðŸ”¹ (Optional) Proxy Password
                );
    }
