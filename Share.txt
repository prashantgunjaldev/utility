package com.example.logging.config;

import com.example.logging.repository.LogRepositoryCustom;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;

@Configuration
@ConditionalOnProperty(name = "logging.db.enabled", havingValue = "true")
public class LoggingDataSourceConfig {

    @Value("${logging.db.url:}")
    private String dbUrl;

    @Value("${logging.db.username:}")
    private String dbUsername;

    @Value("${logging.db.password:}")
    private String dbPassword;

    @Value("${logging.db.driver-class-name:org.postgresql.Driver}")
    private String dbDriver;

    @Bean
    public DataSource loggingDataSource() {
        return DataSourceBuilder.create()
                .url(dbUrl)
                .username(dbUsername)
                .password(dbPassword)
                .driverClassName(dbDriver)
                .build();
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean loggingEntityManagerFactory(
            @Qualifier("loggingDataSource") DataSource loggingDataSource) {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(loggingDataSource);
        em.setPackagesToScan("com.example.logging.entity");
        em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());

        Map<String, Object> properties = new HashMap<>();
        properties.put("hibernate.hbm2ddl.auto", "update");
        properties.put("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect");
        em.setJpaPropertyMap(properties);

        return em;
    }

    @Bean
    public JpaTransactionManager loggingTransactionManager(
            @Qualifier("loggingEntityManagerFactory") EntityManagerFactory loggingEntityManagerFactory) {
        return new JpaTransactionManager(loggingEntityManagerFactory);
    }

    @Bean
    public LogRepositoryCustom logRepositoryCustom() {
        return new LogRepositoryCustom();
    }
}
