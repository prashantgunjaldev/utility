package com.ubs.cumulus.parsingService.xml.morningstar.batch;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import javax.xml.stream.XMLStreamException;
import java.io.IOException;
import java.util.*;

@ExtendWith(MockitoExtension.class)
class GetUniverseItemReaderTest {

    @InjectMocks
    private GetUniverseItemReader getUniverseItemReader;

    @Mock
    private StaxEventItemReader<FundShareClassList.ShareClass> staxEventItemReader;

    private List<FundShareClassList.ShareClass> mockShareClasses;

    @BeforeEach
    void setup() {
        mockShareClasses = new ArrayList<>();
        for (int i = 0; i < 20; i++) {
            mockShareClasses.add(new FundShareClassList.ShareClass());
        }
    }

    @Test
    void testDoRead_ReturnsBatchOf15() throws XMLStreamException, IOException {
        // Mock the superclass method call
        when(staxEventItemReader.read()).thenReturn(mockShareClasses);

        // Read first batch
        List<FundShareClassList.ShareClass> batch1 = getUniverseItemReader.doRead();

        assertNotNull(batch1);
        assertEquals(15, batch1.size());

        // Read second batch
        List<FundShareClassList.ShareClass> batch2 = getUniverseItemReader.doRead();

        assertNotNull(batch2);
        assertEquals(5, batch2.size());

        // Read third batch (should return null)
        List<FundShareClassList.ShareClass> batch3 = getUniverseItemReader.doRead();
        assertNull(batch3);
    }

    @Test
    void testDoRead_WhenNoData_ShouldReturnNull() throws XMLStreamException, IOException {
        when(staxEventItemReader.read()).thenReturn(Collections.emptyList());

        List<FundShareClassList.ShareClass> result = getUniverseItemReader.doRead();

        assertNull(result);
    }
}
