import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersUriSpec;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersSpec;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import reactor.core.publisher.Mono;

import java.lang.reflect.Field;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ParallelHttpServiceTest {

    @Mock
    private WebClient.Builder webClientBuilder;

    @InjectMocks
    private ParallelHttpService parallelHttpService;

    private WebClient webClient;

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);

        // Use a real WebClient instance and spy on it
        webClient = spy(WebClient.builder().build());

        // Mock WebClient.Builder behavior
        when(webClientBuilder.build()).thenReturn(webClient);

        // Manually inject @Value fields
        setField(parallelHttpService, "proxyHost", "localhost");
        setField(parallelHttpService, "proxyPort", "8080");
        setField(parallelHttpService, "proxyUsername", "user");
        setField(parallelHttpService, "proxyPassword", "pass");

        // Manually call init() if needed
        parallelHttpService.init();
    }

    @Test
    public void testFetchData() {
        ExecutionContext executionContext = new ExecutionContext();

        String result = parallelHttpService.fetchData("https://mock-url.com", executionContext);

        assert result != null; // Ensure fetchData() does not return null
    }

    // Utility method to set private fields
    private void setField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }
}
