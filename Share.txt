import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;

class DataProviderMigrationServiceImplTest {

    @InjectMocks
    private DataProviderMigrationServiceImpl dataProviderMigrationService;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private DatasetMapper datasetMapper;

    @Mock
    private DatasetResponseUtil datasetResponseUtil;

    @Mock
    private FileSchema fileSchema;

    @Mock
    private FileFeed fileFeed;

    @Mock
    private DatasetResponse datasetResponse;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUpdateHeaderSchemaInDataset_Success() {
        // Arrange
        List<String> feeds = new ArrayList<>();
        feeds.add("feed1");
        when(fileFeed.getFeedId()).thenReturn("feed1");

        DatasetRequestDTO datasetRequestToUpdate = new DatasetRequestDTO();
        ResponseEntity<DatasetResponse> mockResponseEntity = new ResponseEntity<>(datasetResponse, HttpStatus.OK);

        when(fileSchema.getDatasetId()).thenReturn("123");
        when(datasetResponse.getDatasetId()).thenReturn("123");
        when(restTemplate.exchange(
                eq("feedProcessingConfigURL" + Constants.URL_DATASET_CREATE_SINGLE_DATASET),
                eq(HttpMethod.PUT),
                any(),
                eq(DatasetResponse.class)
        )).thenReturn(mockResponseEntity);

        // Act
        dataProviderMigrationService.updateHeaderSchemaInDataset(fileSchema, feeds, "feedGroupId", fileFeed, datasetResponse);

        // Assert
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.PUT), any(), eq(DatasetResponse.class));
        verify(datasetMapper, times(1)).addHeaderColumns(any(), eq(fileSchema));
    }

    @Test
    void testUpdateHeaderSchemaInDataset_Failure() {
        // Arrange
        List<String> feeds = new ArrayList<>();
        feeds.add("feed1");
        when(fileFeed.getFeedId()).thenReturn("feed1");

        DatasetRequestDTO datasetRequestToUpdate = new DatasetRequestDTO();
        ResponseEntity<DatasetResponse> mockResponseEntity = new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);

        when(fileSchema.getDatasetId()).thenReturn("123");
        when(datasetResponse.getDatasetId()).thenReturn("123");
        when(restTemplate.exchange(
                eq("feedProcessingConfigURL" + Constants.URL_DATASET_CREATE_SINGLE_DATASET),
                eq(HttpMethod.PUT),
                any(),
                eq(DatasetResponse.class)
        )).thenReturn(mockResponseEntity);

        // Act & Assert
        RuntimeException exception = assertThrows(RuntimeException.class, () ->
                dataProviderMigrationService.updateHeaderSchemaInDataset(fileSchema, feeds, "feedGroupId", fileFeed, datasetResponse)
        );
        assertTrue(exception.getMessage().contains("Unable to update dataset"));
    }
}
