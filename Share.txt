import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class GetUniverseXpathProcessorTest {

    @Mock
    private ParallelHttpService parallelHttpService;

    @Mock
    private XMLParserUtil xmlParserUtil;

    @Mock
    private MorningStarCreateEvents morningStarCreateEvents;

    @InjectMocks
    private GetUniverseXpathProcessor processor;

    private List<FundShareClassList.ShareClass> mockItems;
    private List<String> mockXmlResponses;

    @BeforeEach
    void setUp() {
        mockItems = List.of(
            new FundShareClassList.ShareClass("ID1"),
            new FundShareClassList.ShareClass("ID2")
        );

        mockXmlResponses = List.of("<xml>data1</xml>", "<xml>data2</xml>");
    }

    @Test
    void testProcess_ShouldReturnParsedValues() throws Exception {
        when(parallelHttpService.fetchDataInParallel(anyList(), any())).thenReturn(mockXmlResponses);
        when(xmlParserUtil.parseXML(anyString())).thenReturn(new XmlParsedValuesMap());

        List<XmlParsedValuesMap> result = processor.process(mockItems);

        assertNotNull(result);
        assertEquals(2, result.size());
    }

    @Test
    void testGetUrlList_ShouldReturnUrls() {
        List<String> urls = processor.getUrlList(mockItems);

        assertNotNull(urls);
        assertEquals(2, urls.size());
        assertTrue(urls.get(0).contains("DataOutput.aspx"));
    }

    @Test
    void testGetParsedXMLValues_ShouldHandleErrorFetching() {
        List<String> mockXmls = List.of("Error fetching XML", "<xml>validData</xml>");

        List<XmlParsedValuesMap> result = processor.getParsedXMLValues(mockItems, mockXmls);

        assertNotNull(result);
        assertEquals(1, result.size()); // Only the valid XML should be processed
    }
}
