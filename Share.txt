
public List<Group> getAllSecurityGroupsRaw() {
    List<Group> groupList = new ArrayList<>();
    try {
        HttpClient httpClient = HttpClient.newHttpClient();
        TokenCredential credential = new DefaultAzureCredentialBuilder().build();

        String token = credential.getToken(
            new TokenRequestContext().addScopes("https://graph.microsoft.com/.default")
        ).block().getToken();

        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://graph.microsoft.com/v1.0/groups"))
            .header("Authorization", "Bearer " + token)
            .header("Accept", "application/json")
            .build();

        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

        // Parse response JSON manually or using Jackson
        ObjectMapper mapper = new ObjectMapper();
        JsonNode json = mapper.readTree(response.body());

        for (JsonNode groupNode : json.get("value")) {
            Group group = new Group();
            group.setId(groupNode.get("id").asText());
            group.setDisplayName(groupNode.get("displayName").asText());
            groupList.add(group);
        }

    } catch (Exception e) {
        throw new RuntimeException("Failed to fetch groups", e);
    }

    return groupList;
}
