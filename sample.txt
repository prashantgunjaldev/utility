import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.ClientResponse;
import reactor.core.publisher.Mono;

import java.util.Map;

public class BloombergClient {

    private static final String CLIENT_ID = System.getenv("BLOOMBERG_DL_CLIENT_ID");
    private static final String CLIENT_SECRET = System.getenv("BLOOMBERG_DL_CLIENT_SECRET");

    private static final String TOKEN_URL = "https://bsso.blpprofessional.com/ext/api/as/token.oauth2";
    private static final String HOST = "https://api.bloomberg.com";
    private static final String CATALOGS_ENDPOINT = "/eap/catalogs/";

    private final WebClient webClient;

    public BloombergClient() {
        this.webClient = WebClient.builder()
                .baseUrl(HOST)
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();
    }

    private String fetchToken() {
        WebClient tokenClient = WebClient.builder()
                .baseUrl(TOKEN_URL)
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE)
                .build();

        String body = "grant_type=client_credentials&client_id=" + CLIENT_ID + "&client_secret=" + CLIENT_SECRET;

        Map<String, Object> response = tokenClient.post()
                .bodyValue(body)
                .retrieve()
                .bodyToMono(Map.class)
                .block();

        if (response != null && response.containsKey("access_token")) {
            return (String) response.get("access_token");
        } else {
            throw new RuntimeException("Failed to fetch access token: " + response);
        }
    }

    public void callCatalogsEndpoint() {
        String token = fetchToken();

        ClientResponse response = webClient.get()
                .uri(CATALOGS_ENDPOINT)
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                .header("api-version", "2")
                .exchange()
                .block();

        if (response != null) {
            System.out.println("Status Code: " + response.statusCode().value());

            String json = response.bodyToMono(String.class).block();
            System.out.println(json);
        } else {
            System.out.println("No response from server.");
        }
    }

    public static void main(String[] args) {
        BloombergClient client = new BloombergClient();
        client.callCatalogsEndpoint();
    }
}
