public class BBGServiceImpl {

    public String requestAccessToken() throws Exception {
        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.set("Authorization", createAuthHeaderString(cumu_bbg_username, cumu_bbg_passcode));

        MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
        map.add("grant_type", "client_credentials");

        HttpEntity<MultiValueMap<String, String>> entity = new HttpEntity<>(map, headers);

        ResponseEntity<String> response = restTemplate.exchange(
            "https://bsso.blpprofessional.com/ext/api/as/token.oauth2",
            HttpMethod.POST,
            entity,
            String.class
        );

        System.out.println("Resp: " + response);
        return response.toString();
    }

    private String createAuthHeaderString(String username, String password) {
        String auth = username + ":" + password;
        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.US_ASCII));
        return "Basic " + encodedAuth;
    }

    protected RestTemplate getRestTemplate() throws Exception {
        var template = new RestTemplate();

        var credsProvider = new BasicCredentialsProvider();
        var cookieStore = new BasicCookieStore();
        credsProvider.setCredentials(
            new AuthScope(proxyHost, proxyPort),
            new UsernamePasswordCredentials(proxyUsername, proxyPassword.toCharArray())
        );

        var clientBuilder = HttpClientBuilder.create();
        clientBuilder.useSystemProperties();
        clientBuilder.setProxy(new HttpHost(proxyHost, proxyPort));
        clientBuilder.setDefaultCredentialsProvider(credsProvider);
        clientBuilder.setProxyAuthenticationStrategy(new ProxyAuthenticationStrategy());
        clientBuilder.disableRedirectHandling();
        clientBuilder.setDefaultCookieStore(cookieStore);

        var client = clientBuilder.build();
        var factory = new HttpComponentsClientHttpRequestFactory(client);
        template.setRequestFactory(factory);

        return template;
    }
}

============== 

public class BBGServiceImpl {

    public String requestAccessToken() throws IOException, InterruptedException {
        String auth = Base64.getEncoder().encodeToString((cumu_bbg_username + ":" + cumu_bbg_passcode).getBytes(StandardCharsets.US_ASCII));
        String body = "grant_type=client_credentials";

        HttpClient client = HttpClient.newBuilder()
            .proxy(ProxySelector.of(new InetSocketAddress(proxyHost, proxyPort)))
            .authenticator(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(proxyUsername, proxyPassword.toCharArray());
                }
            })
            .build();

        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://bsso.blpprofessional.com/ext/api/as/token.oauth2"))
            .header("Content-Type", "application/x-www-form-urlencoded")
            .header("Authorization", "Basic " + auth)
            .POST(HttpRequest.BodyPublishers.ofString(body))
            .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        System.out.println("Resp: " + response.body());
        return response.body();
    }
}

==========

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.net.InetSocketAddress;
import java.net.ProxySelector;
import java.net.URI;
import java.net.http.HttpClient;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class BBGServiceImpl {

    private final String proxyHost = "your.proxy.host";
    private final int proxyPort = 8080;
    private final String proxyUsername = "proxyuser";
    private final String proxyPassword = "proxypass";

    private final String cumu_bbg_username = "client_id";
    private final String cumu_bbg_passcode = "client_secret";

    public String requestAccessToken() {
        String authHeader = createAuthHeaderString(cumu_bbg_username, cumu_bbg_passcode);

        MultiValueMap<String, String> formData = new LinkedMultiValueMap<>();
        formData.add("grant_type", "client_credentials");

        WebClient webClient = getWebClientWithProxy();

        return webClient.post()
                .uri("https://bsso.blpprofessional.com/ext/api/as/token.oauth2")
                .header(HttpHeaders.AUTHORIZATION, authHeader)
                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE)
                .body(BodyInserters.fromFormData(formData))
                .retrieve()
                .bodyToMono(String.class)
                .doOnNext(System.out::println)
                .block(); // Blocking only for demo; prefer async in production
    }

    private WebClient getWebClientWithProxy() {
        HttpClient httpClient = HttpClient.newBuilder()
                .proxy(ProxySelector.of(new InetSocketAddress(proxyHost, proxyPort)))
                .authenticator(new java.net.Authenticator() {
                    @Override
                    protected java.net.PasswordAuthentication getPasswordAuthentication() {
                        return new java.net.PasswordAuthentication(
                                proxyUsername,
                                proxyPassword.toCharArray()
                        );
                    }
                })
                .build();

        return WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(
                        io.netty.handler.ssl.SslContextBuilder.forClient().build(),
                        HttpClient.from(httpClient)
                ))
                .build();
    }

    private String createAuthHeaderString(String username, String password) {
        String auth = username + ":" + password;
        return "Basic " + Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));
    }
}

