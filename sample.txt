public class BBGServiceImpl {

    public String requestAccessToken() throws Exception {
        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.set("Authorization", createAuthHeaderString(cumu_bbg_username, cumu_bbg_passcode));

        MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
        map.add("grant_type", "client_credentials");

        HttpEntity<MultiValueMap<String, String>> entity = new HttpEntity<>(map, headers);

        ResponseEntity<String> response = restTemplate.exchange(
            "https://bsso.blpprofessional.com/ext/api/as/token.oauth2",
            HttpMethod.POST,
            entity,
            String.class
        );

        System.out.println("Resp: " + response);
        return response.toString();
    }

    private String createAuthHeaderString(String username, String password) {
        String auth = username + ":" + password;
        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.US_ASCII));
        return "Basic " + encodedAuth;
    }

    protected RestTemplate getRestTemplate() throws Exception {
        var template = new RestTemplate();

        var credsProvider = new BasicCredentialsProvider();
        var cookieStore = new BasicCookieStore();
        credsProvider.setCredentials(
            new AuthScope(proxyHost, proxyPort),
            new UsernamePasswordCredentials(proxyUsername, proxyPassword.toCharArray())
        );

        var clientBuilder = HttpClientBuilder.create();
        clientBuilder.useSystemProperties();
        clientBuilder.setProxy(new HttpHost(proxyHost, proxyPort));
        clientBuilder.setDefaultCredentialsProvider(credsProvider);
        clientBuilder.setProxyAuthenticationStrategy(new ProxyAuthenticationStrategy());
        clientBuilder.disableRedirectHandling();
        clientBuilder.setDefaultCookieStore(cookieStore);

        var client = clientBuilder.build();
        var factory = new HttpComponentsClientHttpRequestFactory(client);
        template.setRequestFactory(factory);

        return template;
    }
}

============== 

public class BBGServiceImpl {

    public String requestAccessToken() throws IOException, InterruptedException {
        String auth = Base64.getEncoder().encodeToString((cumu_bbg_username + ":" + cumu_bbg_passcode).getBytes(StandardCharsets.US_ASCII));
        String body = "grant_type=client_credentials";

        HttpClient client = HttpClient.newBuilder()
            .proxy(ProxySelector.of(new InetSocketAddress(proxyHost, proxyPort)))
            .authenticator(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(proxyUsername, proxyPassword.toCharArray());
                }
            })
            .build();

        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://bsso.blpprofessional.com/ext/api/as/token.oauth2"))
            .header("Content-Type", "application/x-www-form-urlencoded")
            .header("Authorization", "Basic " + auth)
            .POST(HttpRequest.BodyPublishers.ofString(body))
            .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        System.out.println("Resp: " + response.body());
        return response.body();
    }
}
