package com.example.adflogs;

import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.core.credential.AccessToken;
import com.azure.core.credential.TokenRequestContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneOffset;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@SpringBootApplication
public class AdfLogsApplication {
    public static void main(String[] args) {
        SpringApplication.run(AdfLogsApplication.class, args);
    }

    @Bean
    public WebClient webClient() {
        return WebClient.builder().baseUrl("https://management.azure.com").build();
    }
}

@RestController
@RequestMapping("/api/adf")
class ADFLogController {

    @Value("${azure.subscriptionId}")
    private String subscriptionId;

    @Value("${azure.resourceGroup}")
    private String resourceGroup;

    @Value("${azure.dataFactoryName}")
    private String factoryName;

    private final WebClient webClient;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public ADFLogController(WebClient webClient) {
        this.webClient = webClient;
    }

    @GetMapping("/logs")
    public ResponseEntity<?> fetchADFLogs(
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
            @RequestParam(required = false) String status,
            @RequestParam(defaultValue = "false") boolean downloadCsv
    ) {
        try {
            String token = getAccessToken();
            ArrayNode result = objectMapper.createArrayNode();

            Instant from = startDate != null ? startDate.atStartOfDay().toInstant(ZoneOffset.UTC) : Instant.now().minus(Duration.ofDays(7));
            Instant to = endDate != null ? endDate.plusDays(1).atStartOfDay().toInstant(ZoneOffset.UTC) : Instant.now();

            String pipelineUrl = String.format("/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DataFactory/factories/%s/pipelines?api-version=2018-06-01",
                    subscriptionId, resourceGroup, factoryName);

            JsonNode pipelines = webClient.get()
                    .uri(pipelineUrl)
                    .headers(h -> h.setBearerAuth(token))
                    .retrieve()
                    .bodyToMono(JsonNode.class)
                    .block();

            for (JsonNode pipeline : pipelines.get("value")) {
                String name = pipeline.get("name").asText();
                String runFilter = String.format("PipelineName eq '%s' and RunStart ge '%s' and RunEnd le '%s'",
                        name, from, to);
                if (status != null) {
                    runFilter += String.format(" and Status eq '%s'", status);
                }

                String runUrl = String.format("/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DataFactory/factories/%s/pipelineruns?api-version=2018-06-01&$filter=%s",
                        subscriptionId, resourceGroup, factoryName, runFilter);

                JsonNode runs = webClient.get()
                        .uri(runUrl)
                        .headers(h -> h.setBearerAuth(token))
                        .retrieve()
                        .bodyToMono(JsonNode.class)
                        .block();

                for (JsonNode run : runs.get("value")) {
                    String runId = run.get("runId").asText();

                    // Get activity runs
                    String activityUrl = String.format("/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DataFactory/factories/%s/pipelineruns/%s/activityruns?api-version=2018-06-01",
                            subscriptionId, resourceGroup, factoryName, runId);

                    JsonNode activities = webClient.get()
                            .uri(activityUrl)
                            .headers(h -> h.setBearerAuth(token))
                            .retrieve()
                            .bodyToMono(JsonNode.class)
                            .block();

                    ObjectNode runNode = objectMapper.createObjectNode();
                    runNode.put("pipeline", name);
                    runNode.set("run", run);
                    runNode.set("activities", activities.get("value"));
                    result.add(runNode);
                }
            }

            if (downloadCsv) {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(baos, true, StandardCharsets.UTF_8);

                writer.println("Pipeline,RunId,Status,RunStart,RunEnd,ActivityCount");
                for (JsonNode entry : result) {
                    JsonNode run = entry.get("run");
                    String line = String.join(",",
                            entry.get("pipeline").asText(),
                            run.get("runId").asText(),
                            run.get("status").asText(),
                            run.get("runStart").asText(),
                            run.get("runEnd").asText(),
                            String.valueOf(entry.get("activities").size()));
                    writer.println(line);
                }

                writer.flush();
                return ResponseEntity.ok()
                        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=adf_logs.csv")
                        .contentType(MediaType.parseMediaType("text/csv"))
                        .body(baos.toByteArray());
            }

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Error: " + e.getMessage());
        }
    }

    private String getAccessToken() {
        DefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();
        AccessToken token = credential.getToken(new TokenRequestContext()
                .addScopes("https://management.azure.com/.default"))
                .block();
        return token.getToken();
    }
}
